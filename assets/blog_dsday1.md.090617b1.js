import{o as n,c as a,a as s,d as p}from"./app.26bcd9b6.js";const t='{"title":"顺序表","description":"","frontmatter":{"title":"顺序表","date":"2019-01-06 14:02:11"},"headers":[{"level":2,"title":"建表","slug":"建表"},{"level":3,"title":"静态列表","slug":"静态列表"},{"level":3,"title":"动态建表","slug":"动态建表"},{"level":2,"title":"顺序存储","slug":"顺序存储"},{"level":3,"title":"插入","slug":"插入"},{"level":3,"title":"删除","slug":"删除"},{"level":2,"title":"定义","slug":"定义"},{"level":2,"title":"建立链表","slug":"建立链表"},{"level":3,"title":"头插法","slug":"头插法"},{"level":3,"title":"尾插法","slug":"尾插法"},{"level":3,"title":"查找","slug":"查找"},{"level":3,"title":"插入","slug":"插入-1"},{"level":3,"title":"删除","slug":"删除-1"},{"level":3,"title":"求表长","slug":"求表长"},{"level":2,"title":"双链表","slug":"双链表"},{"level":3,"title":"定义","slug":"定义-1"},{"level":3,"title":"插入","slug":"插入-2"},{"level":3,"title":"删除","slug":"删除-2"},{"level":2,"title":"循环链表","slug":"循环链表"},{"level":2,"title":"双向循环链表","slug":"双向循环链表"},{"level":2,"title":"静态链表","slug":"静态链表"},{"level":2,"title":"顺序表和链表的比较","slug":"顺序表和链表的比较"}],"relativePath":"blog/dsday1.md","lastUpdated":1640014851029}',o={},e=p('<h1 id="顺序表"><a class="header-anchor" href="#顺序表" aria-hidden="true">#</a> 顺序表</h1><h2 id="建表"><a class="header-anchor" href="#建表" aria-hidden="true">#</a> 建表</h2><h3 id="静态列表"><a class="header-anchor" href="#静态列表" aria-hidden="true">#</a> 静态列表</h3><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span></span></span>\n<span class="token keyword">typedef</span> <span class="token keyword">int</span> Elemtype<span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\n    ElemType data<span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">int</span> length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>SqList<span class="token punctuation">;</span> \n</code></pre></div>',4),c=p('<h3 id="动态建表"><a class="header-anchor" href="#动态建表" aria-hidden="true">#</a> 动态建表</h3><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> Elemtype<span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\n    ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> MaxSize<span class="token punctuation">,</span>length<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span>\n\n<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">initSize</span> <span class="token expression"><span class="token number">100</span></span></span>\nSeqList L<span class="token punctuation">;</span>\nL<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span>initSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h2 id="顺序存储"><a class="header-anchor" href="#顺序存储" aria-hidden="true">#</a> 顺序存储</h2><h3 id="插入"><a class="header-anchor" href="#插入" aria-hidden="true">#</a> 插入</h3><div class="language-c"><pre><code>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//必要的检查</span>\n        <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">&gt;=</span>Maxsize<span class="token punctuation">)</span>\n        <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>\n        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>\n    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="删除"><a class="header-anchor" href="#删除" aria-hidden="true">#</a> 删除</h3><div class="language-c"><pre><code>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//必要的检查</span>\n        <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n    e<span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>\n        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>\n        L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h1 id="链表"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h1><h2 id="定义"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h2><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">{</span>\n    ElemType data<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>LNode<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span>\n</code></pre></div><p>结点点和头指针的区别，头指针始终是指向第一个结点，结点点只是种为了方便的手段。</p><p>加上结点操作第一结点插入和删除操作统一了。空表和非空表的操作统一了。</p><h2 id="建立链表"><a class="header-anchor" href="#建立链表" aria-hidden="true">#</a> 建立链表</h2><h3 id="头插法"><a class="header-anchor" href="#头插法" aria-hidden="true">#</a> 头插法</h3><div class="language-c"><pre><code>LinkList <span class="token function">CreateList</span><span class="token punctuation">(</span>LinkLIst <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    L<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    LNode <span class="token operator">*</span>S<span class="token punctuation">,</span>L<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        s<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span>\n        s<span class="token operator">-&gt;</span>next<span class="token operator">=</span>L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\n        L<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> L<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>// 一直从头开始插入结点，链表顺序与输入顺序相反</p><h3 id="尾插法"><a class="header-anchor" href="#尾插法" aria-hidden="true">#</a> 尾插法</h3><div class="language-c"><pre><code>LinkList <span class="token function">CreateList</span><span class="token punctuation">(</span>LinkLIst <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    <span class="token keyword">int</span> x<span class="token punctuation">;</span>\n    L<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    LNode <span class="token operator">*</span>S<span class="token punctuation">,</span><span class="token operator">*</span>r<span class="token operator">=</span>L<span class="token punctuation">;</span>\n    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        s<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        s<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span>\n        r<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>\n        r<span class="token operator">=</span>s<span class="token punctuation">;</span>\n        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    r<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> L<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="查找"><a class="header-anchor" href="#查找" aria-hidden="true">#</a> 查找</h3><h4 id="按序号"><a class="header-anchor" href="#按序号" aria-hidden="true">#</a> 按序号</h4><div class="language-c"><pre><code>LNode<span class="token operator">*</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    LNode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> L<span class="token punctuation">;</span>\n    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>p！<span class="token operator">=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\n        j<span class="token operator">++</span><span class="token punctuation">;</span> \n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> p<span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>\n\n</code></pre></div><h4 id="按值"><a class="header-anchor" href="#按值" aria-hidden="true">#</a> 按值</h4><div class="language-c"><pre><code>LNode<span class="token operator">*</span> <span class="token function">LocatElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    LNode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-</span>next<span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">!=</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>\n        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">return</span> p<span class="token punctuation">;</span>   \n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="插入-1"><a class="header-anchor" href="#插入-1" aria-hidden="true">#</a> 插入</h3><p>new s</p><div class="language-c"><pre><code>p<span class="token operator">=</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\np<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span> <span class="token comment">//后插</span>\n\n<span class="token comment">//如要实现前插，可在后插基础上交换数据域</span>\n</code></pre></div><h3 id="删除-1"><a class="header-anchor" href="#删除-1" aria-hidden="true">#</a> 删除</h3><div class="language-c"><pre><code>检查合法性，找到第i<span class="token operator">-</span><span class="token number">1</span>个结点\np<span class="token operator">=</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nq<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\np<span class="token operator">-&gt;</span>next<span class="token operator">=</span>q<span class="token operator">-</span>next<span class="token punctuation">;</span>\n<span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><h3 id="求表长"><a class="header-anchor" href="#求表长" aria-hidden="true">#</a> 求表长</h3><div class="language-c"><pre><code>判断是否为空，分是否带头节点\n    LNode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-</span>next<span class="token punctuation">;</span>\n    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n</code></pre></div><h2 id="双链表"><a class="header-anchor" href="#双链表" aria-hidden="true">#</a> 双链表</h2><h3 id="定义-1"><a class="header-anchor" href="#定义-1" aria-hidden="true">#</a> 定义</h3><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">{</span>\n    ElemType data<span class="token punctuation">;</span>\n    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">,</span><span class="token operator">*</span>next<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>DNode<span class="token punctuation">,</span><span class="token operator">*</span>DLinkList<span class="token punctuation">;</span>\n</code></pre></div><h3 id="插入-2"><a class="header-anchor" href="#插入-2" aria-hidden="true">#</a> 插入</h3><div class="language-c"><pre><code>在p后插入<span class="token operator">*</span>s结点\np<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior<span class="token operator">=</span>s<span class="token punctuation">;</span>\ns<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\np<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>\ns<span class="token operator">-&gt;</span>prior<span class="token operator">=</span>p<span class="token punctuation">;</span>\n</code></pre></div><h3 id="删除-2"><a class="header-anchor" href="#删除-2" aria-hidden="true">#</a> 删除</h3><div class="language-c"><pre><code>删除<span class="token operator">*</span>p后一个结点<span class="token operator">*</span>q<span class="token punctuation">;</span>\np<span class="token operator">-&gt;</span>next<span class="token operator">=</span>q<span class="token operator">-</span>next<span class="token punctuation">;</span><span class="token punctuation">;</span>\nq<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior<span class="token operator">=</span>p<span class="token punctuation">;</span>\n<span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>\n\n</code></pre></div><h2 id="循环链表"><a class="header-anchor" href="#循环链表" aria-hidden="true">#</a> 循环链表</h2><p>末尾指针指向头节点</p><h2 id="双向循环链表"><a class="header-anchor" href="#双向循环链表" aria-hidden="true">#</a> 双向循环链表</h2><p>在单向基础上加上头节点指向末尾的 *p为尾节点 p-&gt;next==L,头结点prior域和next域均为L（这个链表自己）</p><h2 id="静态链表"><a class="header-anchor" href="#静态链表" aria-hidden="true">#</a> 静态链表</h2><h2 id="顺序表和链表的比较"><a class="header-anchor" href="#顺序表和链表的比较" aria-hidden="true">#</a> 顺序表和链表的比较</h2><p>基于储存，运算，环境三方面考虑</p>',44);o.render=function(p,t,o,l,u,r){return n(),a("div",null,[e,s(" more "),c])};export default o;export{t as __pageData};
