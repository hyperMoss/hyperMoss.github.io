import{o as n,c as s,a,b as p,e as t,d as o}from"./app.26bcd9b6.js";const c='{"title":"JS排序算法","description":"","frontmatter":{"title":"JS排序算法","date":"2019-03-17T22:39:27.000Z","tags":["Date Structure","JavaScript"]},"headers":[{"level":2,"title":"目的","slug":"目的"},{"level":2,"title":"基础知识","slug":"基础知识"},{"level":2,"title":"冒泡排序","slug":"冒泡排序"},{"level":2,"title":"选择排序","slug":"选择排序"},{"level":2,"title":"插入排序","slug":"插入排序"},{"level":2,"title":"归并排序","slug":"归并排序"},{"level":2,"title":"快速排序","slug":"快速排序"},{"level":2,"title":"参考","slug":"参考"}],"relativePath":"blog/JS排序算法.md","lastUpdated":1625451924559}',e={},u=p("h2",{id:"目的"},[p("a",{class:"header-anchor",href:"#目的","aria-hidden":"true"},"#"),t(" 目的")],-1),l=p("p",null,"最近不是在摸前端的JavaScript么,同时也在准备笔试,这样干脆把这个过程记录下来算了.",-1),k=p("p",null,"面试中特别是大公司的面试算法往往是爱考察的点,因为算法最能简单直观的区分人才.",-1),r=p("p",null,"所以,将最常使用的十大排序算法试着用JavaScript来描写下",-1),i=o('<h2 id="基础知识"><a class="header-anchor" href="#基础知识" aria-hidden="true">#</a> 基础知识</h2><ul><li><strong>时间复杂度</strong>: 可以简单理解为算法执行所耗费的时间,一般用大O符号来表示</li><li><strong>空间复杂度</strong>: 运行完一个程序所需要内存的大小</li><li><strong>排序的稳定性</strong>:排序后,两个相同的元素前后位置不做变动,则算法是稳定的</li></ul><p>交换操作的函数表达</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">ary<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//ary为数组 x,y为数字</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment">//若相等不做操作</span>\n    <span class="token keyword">var</span> temp <span class="token operator">=</span> ary<span class="token punctuation">[</span>x<span class="token punctuation">]</span>  <span class="token comment">// 设置中间变量</span>\n    ary<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> ary<span class="token punctuation">[</span>y<span class="token punctuation">]</span>   <span class="token comment">//交换</span>\n    ary<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> temp\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="冒泡排序"><a class="header-anchor" href="#冒泡排序" aria-hidden="true">#</a> 冒泡排序</h2><p>相信所有人刚开·始学排序都是从冒泡排序开始的,两个循环就可搞定.</p><p>小循环比较相邻两位的大小,如果前大后小就进行交换</p><p>大循环保证了排序的正确实现,通过大循环保证每次都会有一个在大循环内最大的数被移到大循环的最后部分</p><div class="language-js"><pre><code>        <span class="token keyword">function</span> <span class="token function">bubbleSort1</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">var</span> l <span class="token operator">=</span> ary<span class="token punctuation">.</span>length\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>l<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>ary<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> ary\n        <span class="token punctuation">}</span>\n</code></pre></div><p>同样的如果在一次子循环中没有执行交换的话,可以适当的跳出大循环即可,这样可以设置标志位</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">bubbleSort1</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> flag\n            <span class="token keyword">var</span> l <span class="token operator">=</span> ary<span class="token punctuation">.</span>length\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> l <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ary<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n                        flag <span class="token operator">=</span> <span class="token boolean">true</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> ary\n        <span class="token punctuation">}</span>\n</code></pre></div><h2 id="选择排序"><a class="header-anchor" href="#选择排序" aria-hidden="true">#</a> 选择排序</h2><p>选择排序追求的是一次到位,元素在每次移动时就已经到达他在已排好序列中的最终位置.</p><p>通过选择出最小的移出到有序区，再从无序区选择出最小的，如此类推。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> l <span class="token operator">=</span> ary<span class="token punctuation">.</span>length\n            <span class="token keyword">var</span> min\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                min <span class="token operator">=</span> i\n                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> ary<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                        min <span class="token operator">=</span> j\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> ary\n        <span class="token punctuation">}</span>\n</code></pre></div><h2 id="插入排序"><a class="header-anchor" href="#插入排序" aria-hidden="true">#</a> 插入排序</h2><p>同样分为有序区和无序区，不同的是对元素的操作方式，这个只从无序区中选择出一个，放入有序区的合适位置。</p><p>有点像小时候排队的时候，用身高来进行比较，选出一个插入到合适的地方去。</p><p>于是分为了有序区，和有序区。</p><p>从有序区选择一个放入有序区，这里可以使用二分法进行优化。</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> <span class="token number">1</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n    <span class="token keyword">var</span> preIndex<span class="token punctuation">,</span> current<span class="token punctuation">;</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n        \n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>二分版本</p><p>这个<code>reduce</code>有点坑的，网上看的他人的，大概意思是遍历ary元素，将ary的每个元素插入后面的[]空数组中。</p><p>其实写个循环也可以</p><div class="language-js"><pre><code>  <span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> sortAry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token function">insert</span><span class="token punctuation">(</span>sortAry<span class="token punctuation">,</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">return</span> sortAry<span class="token punctuation">;</span>\n\n        <span class="token punctuation">}</span>\n</code></pre></div><div class="language-js"><pre><code>        <span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>insert<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n\n        <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">sortAry<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> l <span class="token operator">=</span> sortAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                sortAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> sortAry<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">var</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>\n                high <span class="token operator">=</span> l<span class="token punctuation">,</span>\n                mid<span class="token punctuation">;</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> sortAry<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> sortAry<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> sortAry<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> sortAry<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                <span class="token keyword">return</span> sortAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> sortAry<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> sortAry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    high <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> sortAry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    i <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n                    <span class="token keyword">break</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n                <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> sortAry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n                    low <span class="token operator">=</span> mid<span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n            <span class="token punctuation">}</span>\n            <span class="token keyword">var</span> midArry <span class="token operator">=</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>\n            <span class="token keyword">var</span> lastArry <span class="token operator">=</span> sortAry<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>\n            sortAry <span class="token operator">=</span> sortAry<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>midArry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>lastArry<span class="token punctuation">)</span>\n            <span class="token keyword">return</span> sortAry\n        <span class="token punctuation">}</span>\n</code></pre></div><h2 id="归并排序"><a class="header-anchor" href="#归并排序" aria-hidden="true">#</a> 归并排序</h2><p>这个排序有点东西的，使用了分治的思想，将上面的二分法活学活用，具体来说就是递归的使用归并排序，其实就是再两两比较时能很快的得出谁在前谁在后，把这个两两给扩大了，序列逐步有序化</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token punctuation">}</span>\n\n                <span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>\n                <span class="token keyword">var</span> left <span class="token operator">=</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>\n                <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n\n                <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>\n                    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n                        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                    <span class="token keyword">else</span> <span class="token punctuation">{</span>\n                        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n                    <span class="token punctuation">}</span>\n                <span class="token punctuation">}</span>\n                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>left<span class="token punctuation">,</span><span class="token operator">...</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>\n                <span class="token keyword">return</span> result<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n</code></pre></div><h2 id="快速排序"><a class="header-anchor" href="#快速排序" aria-hidden="true">#</a> 快速排序</h2><p>快排是很经典的排序了，思想也利用了分治的思想</p><ul><li><p>选择一个元素，称为哨兵（pivot）</p></li><li><p>将数组中分成两个串，所有比哨兵小的放前面，比哨兵大的放后面，再这个操作完成后这个哨兵就位于数列的中间位置，这个被称为分区（partition）操作。</p></li><li><p>递归的把小于哨兵的子数列和大于哨兵的子数列进行排序。</p></li></ul><p>非递归版本</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">var</span> pivot <span class="token operator">=</span> ary<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>\n  <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">var</span> middle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">var</span> val <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      middle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>递归版本</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> <span class="token function-variable function">comparator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">ary<span class="token punctuation">,</span> comparator<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> ary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">var</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">)</span>\n  <span class="token keyword">var</span> pivot <span class="token operator">=</span> ary<span class="token punctuation">[</span>pivotIndex<span class="token punctuation">]</span>\n\n  <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> pivotIndex<span class="token punctuation">,</span> end<span class="token punctuation">)</span>\n\n  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> start<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">comparator</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pivot<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      i<span class="token operator">++</span>\n      <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>\n  <span class="token function">partition</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> comparator<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span>\n  <span class="token function">partition</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> comparator<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> ary\n<span class="token punctuation">}</span>\n\n</code></pre></div><h2 id="参考"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2><p><a href="https://juejin.im/post/5c8532ec6fb9a049a42fdd81?utm_source=gold_browser_extension#heading-4" target="_blank" rel="noopener noreferrer">https://juejin.im/post/5c8532ec6fb9a049a42fdd81?utm_source=gold_browser_extension#heading-4</a></p>',38);e.render=function(p,t,o,c,e,d){return n(),s("div",null,[u,l,k,r,a(" more "),i])};export default e;export{c as __pageData};
