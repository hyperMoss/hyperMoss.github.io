import{o as n,c as a,a as s,b as p,e as t,d as o}from"./app.26bcd9b6.js";const e='{"title":"Date Structure Day2","description":"","frontmatter":{"title":"Date Structure Day2","date":"2019-01-07T22:59:06.000Z","tags":["Date Structure","Summary"]},"headers":[{"level":2,"title":"栈","slug":"栈"},{"level":3,"title":"栈的顺序存储结构","slug":"栈的顺序存储结构"},{"level":2,"title":"队列","slug":"队列"},{"level":3,"title":"顺序队列","slug":"顺序队列"},{"level":3,"title":"循环队列","slug":"循环队列"},{"level":3,"title":"链式队列","slug":"链式队列"},{"level":2,"title":"栈的运用","slug":"栈的运用"},{"level":3,"title":"括号匹配","slug":"括号匹配"},{"level":3,"title":"表达式求值","slug":"表达式求值"},{"level":3,"title":"递归","slug":"递归"}],"relativePath":"blog/dsday2.md","lastUpdated":1625451924563}',c={},u=p("h1",{id:"栈与队列"},[p("a",{class:"header-anchor",href:"#栈与队列","aria-hidden":"true"},"#"),t(" 栈与队列")],-1),l=p("h2",{id:"栈"},[p("a",{class:"header-anchor",href:"#栈","aria-hidden":"true"},"#"),t(" 栈")],-1),k=o('<h3 id="栈的顺序存储结构"><a class="header-anchor" href="#栈的顺序存储结构" aria-hidden="true">#</a> 栈的顺序存储结构</h3><h4 id="定义"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h4><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span> </span><span class="token comment">//定义栈中元素的最大个数</span></span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\nElemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放栈中元素</span>\n<span class="token keyword">int</span> top<span class="token punctuation">;</span> <span class="token comment">//栈顶指针</span>\n<span class="token punctuation">}</span> SqStack<span class="token punctuation">;</span> <span class="token comment">//顺序栈的简写</span>\n</code></pre></div><h4 id="基本操作"><a class="header-anchor" href="#基本操作" aria-hidden="true">#</a> 基本操作</h4><h5 id="初始化"><a class="header-anchor" href="#初始化" aria-hidden="true">#</a> 初始化</h5><div class="language-c"><pre><code><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>\n    s<span class="token punctuation">.</span>top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="判栈空"><a class="header-anchor" href="#判栈空" aria-hidden="true">#</a> 判栈空</h5><div class="language-c"><pre><code>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="进栈"><a class="header-anchor" href="#进栈" aria-hidden="true">#</a> 进栈</h5><div class="language-c"><pre><code>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S ，ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span>MaxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>\nS<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="出栈"><a class="header-anchor" href="#出栈" aria-hidden="true">#</a> 出栈</h5><div class="language-c"><pre><code>bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S，ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>\nx<span class="token operator">=</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="读栈顶"><a class="header-anchor" href="#读栈顶" aria-hidden="true">#</a> 读栈顶</h5><div class="language-c"><pre><code>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack S，ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>\nx<span class="token operator">=</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> \n<span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="共享栈"><a class="header-anchor" href="#共享栈" aria-hidden="true">#</a> 共享栈</h4><h5 id="定义栈"><a class="header-anchor" href="#定义栈" aria-hidden="true">#</a> 定义栈</h5><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//定义栈中元素的最大个数</span></span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\nElemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放栈中元素</span>\n<span class="token keyword">int</span> top1<span class="token punctuation">;</span> <span class="token comment">//栈1栈顶指针</span>\n<span class="token keyword">int</span> top2<span class="token punctuation">;</span> <span class="token comment">//栈2栈顶指针</span>\n<span class="token punctuation">}</span> SqDoubleStack<span class="token punctuation">;</span> <span class="token comment">//顺序共享栈的简写</span>\n</code></pre></div><h5 id="进栈-1"><a class="header-anchor" href="#进栈-1" aria-hidden="true">#</a> 进栈</h5><div class="language-c"><pre><code>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">&amp;</span>S ，ElemType x，<span class="token keyword">int</span> stackNum<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top1<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>s<span class="token punctuation">.</span>top2<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//栈满</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token punctuation">.</span>top1<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token comment">//栈1有元素进栈</span>\n<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">--</span>S<span class="token punctuation">.</span>top2<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token comment">//栈2有元素进栈</span>\n<span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h4 id="链式栈"><a class="header-anchor" href="#链式栈" aria-hidden="true">#</a> 链式栈</h4><h5 id="定义栈-1"><a class="header-anchor" href="#定义栈-1" aria-hidden="true">#</a> 定义栈</h5><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token punctuation">{</span>\nElemtype data<span class="token punctuation">;</span> <span class="token comment">//存放栈中元素</span>\n<span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token operator">*</span>next <span class="token punctuation">;</span> <span class="token comment">//栈顶指针</span>\n<span class="token punctuation">}</span> SNode，\n<span class="token operator">*</span>SLink <span class="token comment">//链栈的结点</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkStack</span><span class="token punctuation">{</span>\nSLink top<span class="token punctuation">;</span> <span class="token comment">//栈顶指针</span>\n<span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment">//链栈结点数</span>\n<span class="token punctuation">}</span>LinkStack <span class="token comment">//链栈</span>\n\n</code></pre></div><h5 id="进栈-2"><a class="header-anchor" href="#进栈-2" aria-hidden="true">#</a> 进栈</h5><div class="language-c"><pre><code>bool <span class="token function">Push</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>S<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>\nSLink p<span class="token operator">=</span><span class="token punctuation">(</span>SLink<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//给新元素分配空间</span>\np<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token comment">//新元素的值</span>\np<span class="token operator">-&gt;</span>next<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> <span class="token comment">//p的后继指向栈顶元素</span>\nS<span class="token operator">-&gt;</span>top<span class="token operator">=</span>p<span class="token punctuation">;</span> <span class="token comment">//栈顶指针指向新的元素</span>\nS<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//栈中元素个数加1</span>\n<span class="token keyword">return</span> true<span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="出栈-1"><a class="header-anchor" href="#出栈-1" aria-hidden="true">#</a> 出栈</h5><div class="language-c"><pre><code>bool <span class="token function">Pop</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>S<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>top<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>\nx<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> <span class="token comment">//栈顶元素值</span>\nSlink p<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> <span class="token comment">//辅助指针</span>\nS<span class="token operator">-&gt;</span>top<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">//栈顶指针后移</span>\n<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//释放被删除数据的存储空间</span>\nS<span class="token operator">-&gt;</span>count<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//栈中元素个数减一</span>\n<span class="token keyword">return</span> true<span class="token punctuation">;</span> \n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="队列"><a class="header-anchor" href="#队列" aria-hidden="true">#</a> 队列</h2><h3 id="顺序队列"><a class="header-anchor" href="#顺序队列" aria-hidden="true">#</a> 顺序队列</h3><h4 id="定义-1"><a class="header-anchor" href="#定义-1" aria-hidden="true">#</a> 定义</h4><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span> </span><span class="token comment">//定义队列中元素的最大个数</span></span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>\nElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//存放队列元素</span>\n<span class="token keyword">int</span> front，rear<span class="token punctuation">;</span> <span class="token comment">//队头指针和队尾指针</span>\n<span class="token punctuation">}</span> SqQueue<span class="token punctuation">;</span>\n</code></pre></div><h3 id="循环队列"><a class="header-anchor" href="#循环队列" aria-hidden="true">#</a> 循环队列</h3><h4 id="循环队列操作"><a class="header-anchor" href="#循环队列操作" aria-hidden="true">#</a> 循环队列操作</h4><h5 id="入队"><a class="header-anchor" href="#入队" aria-hidden="true">#</a> 入队</h5><div class="language-c"><pre><code>bool <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token operator">==</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//队满</span>\nQ<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>\nQ<span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span> \n<span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="出队"><a class="header-anchor" href="#出队" aria-hidden="true">#</a> 出队</h5><div class="language-c"><pre><code>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//队空，报错</span>\nx<span class="token operator">=</span>Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>\nQ<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>\n<span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="链式队列"><a class="header-anchor" href="#链式队列" aria-hidden="true">#</a> 链式队列</h3><h4 id="定义-2"><a class="header-anchor" href="#定义-2" aria-hidden="true">#</a> 定义</h4><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token comment">//链式队列结点</span>\nElemType data<span class="token punctuation">;</span>\n<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>LinkNode<span class="token punctuation">;</span>\n<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token comment">//链式队列</span>\nLinkNode <span class="token operator">*</span>front<span class="token punctuation">,</span><span class="token operator">*</span>rear<span class="token punctuation">;</span> <span class="token comment">//队头和队尾指针</span>\n<span class="token punctuation">}</span>LinkQueue<span class="token punctuation">;</span>\n</code></pre></div><h4 id="链式队列操作"><a class="header-anchor" href="#链式队列操作" aria-hidden="true">#</a> 链式队列操作</h4><h5 id="入队-1"><a class="header-anchor" href="#入队-1" aria-hidden="true">#</a> 入队</h5><div class="language-c"><pre><code><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q，ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>\ns<span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ns<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span> \ns<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> \nQ<span class="token punctuation">.</span>rear<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>\nQ<span class="token punctuation">.</span>rear<span class="token operator">=</span>s<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h5 id="出队-1"><a class="header-anchor" href="#出队-1" aria-hidden="true">#</a> 出队</h5><div class="language-c"><pre><code>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//空队</span>\np<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\nx<span class="token operator">=</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>\nQ<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>p<span class="token punctuation">)</span> Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span> <span class="token comment">//若原队列中只有一个结点，删除后变空</span>\n<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> true<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="栈的运用"><a class="header-anchor" href="#栈的运用" aria-hidden="true">#</a> 栈的运用</h2><h3 id="括号匹配"><a class="header-anchor" href="#括号匹配" aria-hidden="true">#</a> 括号匹配</h3><div class="language-c"><pre><code>bool <span class="token function">Check</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token punctuation">)</span><span class="token punctuation">{</span>\nstack s<span class="token punctuation">;</span>\n<span class="token function">InitStack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//字符串长度为len</span>\n<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>\n<span class="token punctuation">{</span>\n<span class="token keyword">char</span> a<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>\n<span class="token keyword">case</span> <span class="token string">&#39;(&#39;</span><span class="token operator">:</span>\n<span class="token keyword">case</span> <span class="token string">&#39;[&#39;</span><span class="token operator">:</span>\n<span class="token function">Push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token keyword">case</span> <span class="token string">&#39;)&#39;</span><span class="token operator">:</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">!=</span>‘<span class="token punctuation">(</span>‘ <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//出栈顶。如果不匹配直接返回不合法</span>\n<span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token keyword">case</span> <span class="token string">&#39;]&#39;</span><span class="token operator">:</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">!=</span>‘<span class="token punctuation">]</span>’ <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> \n<span class="token keyword">break</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment">//匹配完所有括号最后要求栈中为空</span>\n<span class="token keyword">else</span> <span class="token keyword">return</span> false\n<span class="token punctuation">}</span>\n</code></pre></div><h3 id="表达式求值"><a class="header-anchor" href="#表达式求值" aria-hidden="true">#</a> 表达式求值</h3><h3 id="递归"><a class="header-anchor" href="#递归" aria-hidden="true">#</a> 递归</h3><p>斐波拉契数列</p><div class="language-c"><pre><code><span class="token keyword">int</span> <span class="token function">Fib</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> \n<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> \n<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> \n</code></pre></div>',51);c.render=function(p,t,o,e,c,r){return n(),a("div",null,[u,l,s(" more "),k])};export default c;export{e as __pageData};
