import{_ as n,c as a,o as s,a as p}from"./app.6dc56251.js";const m='{"title":"\u6808\u4E0E\u961F\u5217","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u6808","slug":"\u6808"},{"level":3,"title":"\u6808\u7684\u987A\u5E8F\u5B58\u50A8\u7ED3\u6784","slug":"\u6808\u7684\u987A\u5E8F\u5B58\u50A8\u7ED3\u6784"},{"level":2,"title":"\u961F\u5217","slug":"\u961F\u5217"},{"level":3,"title":"\u987A\u5E8F\u961F\u5217","slug":"\u987A\u5E8F\u961F\u5217"},{"level":3,"title":"\u5FAA\u73AF\u961F\u5217","slug":"\u5FAA\u73AF\u961F\u5217"},{"level":3,"title":"\u94FE\u5F0F\u961F\u5217","slug":"\u94FE\u5F0F\u961F\u5217"},{"level":2,"title":"\u6808\u7684\u8FD0\u7528","slug":"\u6808\u7684\u8FD0\u7528"},{"level":3,"title":"\u62EC\u53F7\u5339\u914D","slug":"\u62EC\u53F7\u5339\u914D"},{"level":3,"title":"\u8868\u8FBE\u5F0F\u6C42\u503C","slug":"\u8868\u8FBE\u5F0F\u6C42\u503C"},{"level":3,"title":"\u9012\u5F52","slug":"\u9012\u5F52"}],"relativePath":"docs/study/data-struct/dsday2.md","lastUpdated":1651075313117}',t={},o=p(`<h1 id="\u6808\u4E0E\u961F\u5217" tabindex="-1">\u6808\u4E0E\u961F\u5217 <a class="header-anchor" href="#\u6808\u4E0E\u961F\u5217" aria-hidden="true">#</a></h1><h2 id="\u6808" tabindex="-1">\u6808 <a class="header-anchor" href="#\u6808" aria-hidden="true">#</a></h2><h3 id="\u6808\u7684\u987A\u5E8F\u5B58\u50A8\u7ED3\u6784" tabindex="-1">\u6808\u7684\u987A\u5E8F\u5B58\u50A8\u7ED3\u6784 <a class="header-anchor" href="#\u6808\u7684\u987A\u5E8F\u5B58\u50A8\u7ED3\u6784" aria-hidden="true">#</a></h3><h4 id="\u5B9A\u4E49" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a></h4><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span> </span><span class="token comment">//\u5B9A\u4E49\u6808\u4E2D\u5143\u7D20\u7684\u6700\u5927\u4E2A\u6570</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//\u5B58\u653E\u6808\u4E2D\u5143\u7D20</span>
<span class="token keyword">int</span> top<span class="token punctuation">;</span> <span class="token comment">//\u6808\u9876\u6307\u9488</span>
<span class="token punctuation">}</span> SqStack<span class="token punctuation">;</span> <span class="token comment">//\u987A\u5E8F\u6808\u7684\u7B80\u5199</span>
</code></pre></div><h4 id="\u57FA\u672C\u64CD\u4F5C" tabindex="-1">\u57FA\u672C\u64CD\u4F5C <a class="header-anchor" href="#\u57FA\u672C\u64CD\u4F5C" aria-hidden="true">#</a></h4><h5 id="\u521D\u59CB\u5316" tabindex="-1">\u521D\u59CB\u5316 <a class="header-anchor" href="#\u521D\u59CB\u5316" aria-hidden="true">#</a></h5><div class="language-c"><pre><code><span class="token keyword">void</span> <span class="token function">InitStack</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>
    s<span class="token punctuation">.</span>top<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h5 id="\u5224\u6808\u7A7A" tabindex="-1">\u5224\u6808\u7A7A <a class="header-anchor" href="#\u5224\u6808\u7A7A" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">StackEmpty</span><span class="token punctuation">(</span>SqStack S<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h5 id="\u8FDB\u6808" tabindex="-1">\u8FDB\u6808 <a class="header-anchor" href="#\u8FDB\u6808" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S \uFF0CElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span>MaxSize<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
S<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h5 id="\u51FA\u6808" tabindex="-1">\u51FA\u6808 <a class="header-anchor" href="#\u51FA\u6808" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">Pop</span><span class="token punctuation">(</span>SqStack <span class="token operator">&amp;</span>S\uFF0CElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
x<span class="token operator">=</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h5 id="\u8BFB\u6808\u9876" tabindex="-1">\u8BFB\u6808\u9876 <a class="header-anchor" href="#\u8BFB\u6808\u9876" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">GetTop</span><span class="token punctuation">(</span>SqStack S\uFF0CElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
x<span class="token operator">=</span>S<span class="token punctuation">.</span>data<span class="token punctuation">[</span>S<span class="token punctuation">.</span>top<span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="\u5171\u4EAB\u6808" tabindex="-1">\u5171\u4EAB\u6808 <a class="header-anchor" href="#\u5171\u4EAB\u6808" aria-hidden="true">#</a></h4><h5 id="\u5B9A\u4E49\u6808" tabindex="-1">\u5B9A\u4E49\u6808 <a class="header-anchor" href="#\u5B9A\u4E49\u6808" aria-hidden="true">#</a></h5><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">100</span> </span><span class="token comment">//\u5B9A\u4E49\u6808\u4E2D\u5143\u7D20\u7684\u6700\u5927\u4E2A\u6570</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
Elemtype data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//\u5B58\u653E\u6808\u4E2D\u5143\u7D20</span>
<span class="token keyword">int</span> top1<span class="token punctuation">;</span> <span class="token comment">//\u68081\u6808\u9876\u6307\u9488</span>
<span class="token keyword">int</span> top2<span class="token punctuation">;</span> <span class="token comment">//\u68082\u6808\u9876\u6307\u9488</span>
<span class="token punctuation">}</span> SqDoubleStack<span class="token punctuation">;</span> <span class="token comment">//\u987A\u5E8F\u5171\u4EAB\u6808\u7684\u7B80\u5199</span>
</code></pre></div><h5 id="\u8FDB\u6808-1" tabindex="-1">\u8FDB\u6808 <a class="header-anchor" href="#\u8FDB\u6808-1" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">Push</span><span class="token punctuation">(</span>SqDoubleStack <span class="token operator">&amp;</span>S \uFF0CElemType x\uFF0C<span class="token keyword">int</span> stackNum<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token punctuation">.</span>top1<span class="token operator">+</span><span class="token number">1</span><span class="token operator">==</span>s<span class="token punctuation">.</span>top2<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//\u6808\u6EE1</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">++</span>S<span class="token punctuation">.</span>top1<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token comment">//\u68081\u6709\u5143\u7D20\u8FDB\u6808</span>
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>stackNum<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span> S<span class="token punctuation">.</span>data<span class="token punctuation">[</span><span class="token operator">--</span>S<span class="token punctuation">.</span>top2<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token comment">//\u68082\u6709\u5143\u7D20\u8FDB\u6808</span>
<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h4 id="\u94FE\u5F0F\u6808" tabindex="-1">\u94FE\u5F0F\u6808 <a class="header-anchor" href="#\u94FE\u5F0F\u6808" aria-hidden="true">#</a></h4><h5 id="\u5B9A\u4E49\u6808-1" tabindex="-1">\u5B9A\u4E49\u6808 <a class="header-anchor" href="#\u5B9A\u4E49\u6808-1" aria-hidden="true">#</a></h5><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">SNode</span><span class="token punctuation">{</span>
Elemtype data<span class="token punctuation">;</span> <span class="token comment">//\u5B58\u653E\u6808\u4E2D\u5143\u7D20</span>
<span class="token keyword">struct</span> <span class="token class-name">SNode</span> <span class="token operator">*</span>next <span class="token punctuation">;</span> <span class="token comment">//\u6808\u9876\u6307\u9488</span>
<span class="token punctuation">}</span> SNode\uFF0C
<span class="token operator">*</span>SLink <span class="token comment">//\u94FE\u6808\u7684\u7ED3\u70B9</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LinkStack</span><span class="token punctuation">{</span>
SLink top<span class="token punctuation">;</span> <span class="token comment">//\u6808\u9876\u6307\u9488</span>
<span class="token keyword">int</span> count<span class="token punctuation">;</span> <span class="token comment">//\u94FE\u6808\u7ED3\u70B9\u6570</span>
<span class="token punctuation">}</span>LinkStack <span class="token comment">//\u94FE\u6808</span>

</code></pre></div><h5 id="\u8FDB\u6808-2" tabindex="-1">\u8FDB\u6808 <a class="header-anchor" href="#\u8FDB\u6808-2" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">Push</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>S<span class="token punctuation">,</span> ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
SLink p<span class="token operator">=</span><span class="token punctuation">(</span>SLink<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>SNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u7ED9\u65B0\u5143\u7D20\u5206\u914D\u7A7A\u95F4</span>
p<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span> <span class="token comment">//\u65B0\u5143\u7D20\u7684\u503C</span>
p<span class="token operator">-&gt;</span>next<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> <span class="token comment">//p\u7684\u540E\u7EE7\u6307\u5411\u6808\u9876\u5143\u7D20</span>
S<span class="token operator">-&gt;</span>top<span class="token operator">=</span>p<span class="token punctuation">;</span> <span class="token comment">//\u6808\u9876\u6307\u9488\u6307\u5411\u65B0\u7684\u5143\u7D20</span>
S<span class="token operator">-&gt;</span>count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">//\u6808\u4E2D\u5143\u7D20\u4E2A\u6570\u52A01</span>
<span class="token keyword">return</span> true<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><h5 id="\u51FA\u6808-1" tabindex="-1">\u51FA\u6808 <a class="header-anchor" href="#\u51FA\u6808-1" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">Pop</span><span class="token punctuation">(</span>LinkStack <span class="token operator">*</span>S<span class="token punctuation">,</span> ElemType<span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>S<span class="token operator">-&gt;</span>top<span class="token operator">==</span><span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span>
x<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span> <span class="token comment">//\u6808\u9876\u5143\u7D20\u503C</span>
Slink p<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token punctuation">;</span> <span class="token comment">//\u8F85\u52A9\u6307\u9488</span>
S<span class="token operator">-&gt;</span>top<span class="token operator">=</span>S<span class="token operator">-&gt;</span>top<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span> <span class="token comment">//\u6808\u9876\u6307\u9488\u540E\u79FB</span>
<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u91CA\u653E\u88AB\u5220\u9664\u6570\u636E\u7684\u5B58\u50A8\u7A7A\u95F4</span>
S<span class="token operator">-&gt;</span>count<span class="token operator">--</span><span class="token punctuation">;</span> <span class="token comment">//\u6808\u4E2D\u5143\u7D20\u4E2A\u6570\u51CF\u4E00</span>
<span class="token keyword">return</span> true<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u961F\u5217" tabindex="-1">\u961F\u5217 <a class="header-anchor" href="#\u961F\u5217" aria-hidden="true">#</a></h2><h3 id="\u987A\u5E8F\u961F\u5217" tabindex="-1">\u987A\u5E8F\u961F\u5217 <a class="header-anchor" href="#\u987A\u5E8F\u961F\u5217" aria-hidden="true">#</a></h3><h4 id="\u5B9A\u4E49-1" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49-1" aria-hidden="true">#</a></h4><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span> </span><span class="token comment">//\u5B9A\u4E49\u961F\u5217\u4E2D\u5143\u7D20\u7684\u6700\u5927\u4E2A\u6570</span></span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
ElemType data<span class="token punctuation">[</span>MaxSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//\u5B58\u653E\u961F\u5217\u5143\u7D20</span>
<span class="token keyword">int</span> front\uFF0Crear<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5934\u6307\u9488\u548C\u961F\u5C3E\u6307\u9488</span>
<span class="token punctuation">}</span> SqQueue<span class="token punctuation">;</span>
</code></pre></div><h3 id="\u5FAA\u73AF\u961F\u5217" tabindex="-1">\u5FAA\u73AF\u961F\u5217 <a class="header-anchor" href="#\u5FAA\u73AF\u961F\u5217" aria-hidden="true">#</a></h3><h4 id="\u5FAA\u73AF\u961F\u5217\u64CD\u4F5C" tabindex="-1">\u5FAA\u73AF\u961F\u5217\u64CD\u4F5C <a class="header-anchor" href="#\u5FAA\u73AF\u961F\u5217\u64CD\u4F5C" aria-hidden="true">#</a></h4><h5 id="\u5165\u961F" tabindex="-1">\u5165\u961F <a class="header-anchor" href="#\u5165\u961F" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">EnQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token operator">==</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//\u961F\u6EE1</span>
Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">]</span><span class="token operator">=</span>x<span class="token punctuation">;</span>
Q<span class="token punctuation">.</span>rear<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span> 
<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h5 id="\u51FA\u961F" tabindex="-1">\u51FA\u961F <a class="header-anchor" href="#\u51FA\u961F" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>SqQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//\u961F\u7A7A\uFF0C\u62A5\u9519</span>
x<span class="token operator">=</span>Q<span class="token punctuation">.</span>data<span class="token punctuation">[</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">]</span><span class="token punctuation">;</span>
Q<span class="token punctuation">.</span>front<span class="token operator">=</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span>MaxSize<span class="token punctuation">;</span>
<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u94FE\u5F0F\u961F\u5217" tabindex="-1">\u94FE\u5F0F\u961F\u5217 <a class="header-anchor" href="#\u94FE\u5F0F\u961F\u5217" aria-hidden="true">#</a></h3><h4 id="\u5B9A\u4E49-2" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49-2" aria-hidden="true">#</a></h4><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token comment">//\u94FE\u5F0F\u961F\u5217\u7ED3\u70B9</span>
ElemType data<span class="token punctuation">;</span>
<span class="token keyword">struct</span> <span class="token class-name">LinkNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>LinkNode<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span> <span class="token comment">//\u94FE\u5F0F\u961F\u5217</span>
LinkNode <span class="token operator">*</span>front<span class="token punctuation">,</span><span class="token operator">*</span>rear<span class="token punctuation">;</span> <span class="token comment">//\u961F\u5934\u548C\u961F\u5C3E\u6307\u9488</span>
<span class="token punctuation">}</span>LinkQueue<span class="token punctuation">;</span>
</code></pre></div><h4 id="\u94FE\u5F0F\u961F\u5217\u64CD\u4F5C" tabindex="-1">\u94FE\u5F0F\u961F\u5217\u64CD\u4F5C <a class="header-anchor" href="#\u94FE\u5F0F\u961F\u5217\u64CD\u4F5C" aria-hidden="true">#</a></h4><h5 id="\u5165\u961F-1" tabindex="-1">\u5165\u961F <a class="header-anchor" href="#\u5165\u961F-1" aria-hidden="true">#</a></h5><div class="language-c"><pre><code><span class="token keyword">void</span> <span class="token function">EnQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q\uFF0CElemType x<span class="token punctuation">)</span><span class="token punctuation">{</span>
s<span class="token operator">=</span><span class="token punctuation">(</span>LinkNode <span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LinkNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span> 
s<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span> 
Q<span class="token punctuation">.</span>rear<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>
Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>s<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h5 id="\u51FA\u961F-1" tabindex="-1">\u51FA\u961F <a class="header-anchor" href="#\u51FA\u961F-1" aria-hidden="true">#</a></h5><div class="language-c"><pre><code>bool <span class="token function">DeQueue</span><span class="token punctuation">(</span>LinkQueue <span class="token operator">&amp;</span>Q<span class="token punctuation">,</span>ElemType <span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>front<span class="token operator">==</span>Q<span class="token punctuation">.</span>rear<span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//\u7A7A\u961F</span>
p<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
x<span class="token operator">=</span>p<span class="token operator">-&gt;</span>data<span class="token punctuation">;</span>
Q<span class="token punctuation">.</span>front<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>Q<span class="token punctuation">.</span>rear<span class="token operator">==</span>p<span class="token punctuation">)</span> Q<span class="token punctuation">.</span>rear<span class="token operator">=</span>Q<span class="token punctuation">.</span>front<span class="token punctuation">;</span> <span class="token comment">//\u82E5\u539F\u961F\u5217\u4E2D\u53EA\u6709\u4E00\u4E2A\u7ED3\u70B9\uFF0C\u5220\u9664\u540E\u53D8\u7A7A</span>
<span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u6808\u7684\u8FD0\u7528" tabindex="-1">\u6808\u7684\u8FD0\u7528 <a class="header-anchor" href="#\u6808\u7684\u8FD0\u7528" aria-hidden="true">#</a></h2><h3 id="\u62EC\u53F7\u5339\u914D" tabindex="-1">\u62EC\u53F7\u5339\u914D <a class="header-anchor" href="#\u62EC\u53F7\u5339\u914D" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>bool <span class="token function">Check</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>str <span class="token punctuation">)</span><span class="token punctuation">{</span>
stack s<span class="token punctuation">;</span>
<span class="token function">InitStack</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//\u5B57\u7B26\u4E32\u957F\u5EA6\u4E3Alen</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span><span class="token operator">++</span>i<span class="token punctuation">)</span>
<span class="token punctuation">{</span>
<span class="token keyword">char</span> a<span class="token operator">=</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">switch</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">{</span>
<span class="token keyword">case</span> <span class="token string">&#39;(&#39;</span><span class="token operator">:</span>
<span class="token keyword">case</span> <span class="token string">&#39;[&#39;</span><span class="token operator">:</span>
<span class="token function">Push</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> <span class="token string">&#39;)&#39;</span><span class="token operator">:</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">!=</span>\u2018<span class="token punctuation">(</span>\u2018 <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> <span class="token comment">//\u51FA\u6808\u9876\u3002\u5982\u679C\u4E0D\u5339\u914D\u76F4\u63A5\u8FD4\u56DE\u4E0D\u5408\u6CD5</span>
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> <span class="token string">&#39;]&#39;</span><span class="token operator">:</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">Pop</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">!=</span>\u2018<span class="token punctuation">]</span>\u2019 <span class="token punctuation">)</span> <span class="token keyword">return</span> false<span class="token punctuation">;</span> 
<span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">Empty</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> true<span class="token punctuation">;</span> <span class="token comment">//\u5339\u914D\u5B8C\u6240\u6709\u62EC\u53F7\u6700\u540E\u8981\u6C42\u6808\u4E2D\u4E3A\u7A7A</span>
<span class="token keyword">else</span> <span class="token keyword">return</span> false
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u8868\u8FBE\u5F0F\u6C42\u503C" tabindex="-1">\u8868\u8FBE\u5F0F\u6C42\u503C <a class="header-anchor" href="#\u8868\u8FBE\u5F0F\u6C42\u503C" aria-hidden="true">#</a></h3><h3 id="\u9012\u5F52" tabindex="-1">\u9012\u5F52 <a class="header-anchor" href="#\u9012\u5F52" aria-hidden="true">#</a></h3><p>\u6590\u6CE2\u62C9\u5951\u6570\u5217</p><div class="language-c"><pre><code><span class="token keyword">int</span> <span class="token function">Fib</span> <span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> 
<span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Fib</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre></div>`,53),e=[o];function c(u,l,k,r,i,d){return s(),a("div",null,e)}var y=n(t,[["render",c]]);export{m as __pageData,y as default};
