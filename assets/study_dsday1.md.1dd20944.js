import{_ as n,c as a,o as s,a as p}from"./app.9a549255.js";const g='{"title":"\u987A\u5E8F\u8868","description":"","frontmatter":{"title":"\u987A\u5E8F\u8868","date":"2019-01-06 14:02:11"},"headers":[{"level":2,"title":"\u5EFA\u8868","slug":"\u5EFA\u8868"},{"level":3,"title":"\u9759\u6001\u5217\u8868","slug":"\u9759\u6001\u5217\u8868"},{"level":3,"title":"\u52A8\u6001\u5EFA\u8868","slug":"\u52A8\u6001\u5EFA\u8868"},{"level":2,"title":"\u987A\u5E8F\u5B58\u50A8","slug":"\u987A\u5E8F\u5B58\u50A8"},{"level":3,"title":"\u63D2\u5165","slug":"\u63D2\u5165"},{"level":3,"title":"\u5220\u9664","slug":"\u5220\u9664"},{"level":2,"title":"\u5B9A\u4E49","slug":"\u5B9A\u4E49"},{"level":2,"title":"\u5EFA\u7ACB\u94FE\u8868","slug":"\u5EFA\u7ACB\u94FE\u8868"},{"level":3,"title":"\u5934\u63D2\u6CD5","slug":"\u5934\u63D2\u6CD5"},{"level":3,"title":"\u5C3E\u63D2\u6CD5","slug":"\u5C3E\u63D2\u6CD5"},{"level":3,"title":"\u67E5\u627E","slug":"\u67E5\u627E"},{"level":3,"title":"\u63D2\u5165","slug":"\u63D2\u5165-1"},{"level":3,"title":"\u5220\u9664","slug":"\u5220\u9664-1"},{"level":3,"title":"\u6C42\u8868\u957F","slug":"\u6C42\u8868\u957F"},{"level":2,"title":"\u53CC\u94FE\u8868","slug":"\u53CC\u94FE\u8868"},{"level":3,"title":"\u5B9A\u4E49","slug":"\u5B9A\u4E49-1"},{"level":3,"title":"\u63D2\u5165","slug":"\u63D2\u5165-2"},{"level":3,"title":"\u5220\u9664","slug":"\u5220\u9664-2"},{"level":2,"title":"\u5FAA\u73AF\u94FE\u8868","slug":"\u5FAA\u73AF\u94FE\u8868"},{"level":2,"title":"\u53CC\u5411\u5FAA\u73AF\u94FE\u8868","slug":"\u53CC\u5411\u5FAA\u73AF\u94FE\u8868"},{"level":2,"title":"\u9759\u6001\u94FE\u8868","slug":"\u9759\u6001\u94FE\u8868"},{"level":2,"title":"\u987A\u5E8F\u8868\u548C\u94FE\u8868\u7684\u6BD4\u8F83","slug":"\u987A\u5E8F\u8868\u548C\u94FE\u8868\u7684\u6BD4\u8F83"}],"relativePath":"study/dsday1.md","lastUpdated":1649341951561}',t={},o=p(`<h1 id="\u987A\u5E8F\u8868" tabindex="-1">\u987A\u5E8F\u8868 <a class="header-anchor" href="#\u987A\u5E8F\u8868" aria-hidden="true">#</a></h1><h2 id="\u5EFA\u8868" tabindex="-1">\u5EFA\u8868 <a class="header-anchor" href="#\u5EFA\u8868" aria-hidden="true">#</a></h2><h3 id="\u9759\u6001\u5217\u8868" tabindex="-1">\u9759\u6001\u5217\u8868 <a class="header-anchor" href="#\u9759\u6001\u5217\u8868" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MaxSize</span> <span class="token expression"><span class="token number">50</span></span></span>
<span class="token keyword">typedef</span> <span class="token keyword">int</span> Elemtype<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    ElemType data<span class="token punctuation">[</span>Maxsize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>SqList<span class="token punctuation">;</span> 
</code></pre></div><h3 id="\u52A8\u6001\u5EFA\u8868" tabindex="-1">\u52A8\u6001\u5EFA\u8868 <a class="header-anchor" href="#\u52A8\u6001\u5EFA\u8868" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">int</span> Elemtype<span class="token punctuation">;</span>
<span class="token keyword">typedef</span> <span class="token keyword">struct</span><span class="token punctuation">{</span>
    ElemType <span class="token operator">*</span>data<span class="token punctuation">;</span>
    <span class="token keyword">int</span> MaxSize<span class="token punctuation">,</span>length<span class="token punctuation">;</span>
<span class="token punctuation">}</span>SeqList<span class="token punctuation">;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">initSize</span> <span class="token expression"><span class="token number">100</span></span></span>
SeqList L<span class="token punctuation">;</span>
L<span class="token punctuation">.</span>data<span class="token operator">=</span><span class="token punctuation">(</span>ElemType<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>ElemType<span class="token punctuation">)</span><span class="token operator">*</span>initSize<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h2 id="\u987A\u5E8F\u5B58\u50A8" tabindex="-1">\u987A\u5E8F\u5B58\u50A8 <a class="header-anchor" href="#\u987A\u5E8F\u5B58\u50A8" aria-hidden="true">#</a></h2><h3 id="\u63D2\u5165" tabindex="-1">\u63D2\u5165 <a class="header-anchor" href="#\u63D2\u5165" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>bool <span class="token function">ListInsert</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//\u5FC5\u8981\u7684\u68C0\u67E5</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>L<span class="token punctuation">.</span>length<span class="token operator">&gt;=</span>Maxsize<span class="token punctuation">)</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>L<span class="token punctuation">.</span>length<span class="token punctuation">;</span>j<span class="token operator">&gt;=</span>i<span class="token punctuation">;</span>j<span class="token operator">--</span><span class="token punctuation">)</span>
        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>e<span class="token punctuation">;</span>
    L<span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u5220\u9664" tabindex="-1">\u5220\u9664 <a class="header-anchor" href="#\u5220\u9664" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>bool <span class="token function">ListDelete</span><span class="token punctuation">(</span>SqList <span class="token operator">&amp;</span>L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">,</span>ElemType e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token operator">||</span>i<span class="token operator">&gt;</span>L<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">//\u5FC5\u8981\u7684\u68C0\u67E5</span>
        <span class="token keyword">return</span> false<span class="token punctuation">;</span>
    e<span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>length<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>
        L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>L<span class="token punctuation">.</span>data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
        L<span class="token punctuation">.</span>length<span class="token operator">--</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> true<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h1 id="\u94FE\u8868" tabindex="-1">\u94FE\u8868 <a class="header-anchor" href="#\u94FE\u8868" aria-hidden="true">#</a></h1><h2 id="\u5B9A\u4E49" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49" aria-hidden="true">#</a></h2><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">LNode</span><span class="token punctuation">{</span>
    ElemType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">LNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>LNode<span class="token punctuation">,</span><span class="token operator">*</span>LinkList<span class="token punctuation">;</span>
</code></pre></div><p>\u7ED3\u70B9\u70B9\u548C\u5934\u6307\u9488\u7684\u533A\u522B\uFF0C\u5934\u6307\u9488\u59CB\u7EC8\u662F\u6307\u5411\u7B2C\u4E00\u4E2A\u7ED3\u70B9\uFF0C\u7ED3\u70B9\u70B9\u53EA\u662F\u79CD\u4E3A\u4E86\u65B9\u4FBF\u7684\u624B\u6BB5\u3002</p><p>\u52A0\u4E0A\u7ED3\u70B9\u64CD\u4F5C\u7B2C\u4E00\u7ED3\u70B9\u63D2\u5165\u548C\u5220\u9664\u64CD\u4F5C\u7EDF\u4E00\u4E86\u3002\u7A7A\u8868\u548C\u975E\u7A7A\u8868\u7684\u64CD\u4F5C\u7EDF\u4E00\u4E86\u3002</p><h2 id="\u5EFA\u7ACB\u94FE\u8868" tabindex="-1">\u5EFA\u7ACB\u94FE\u8868 <a class="header-anchor" href="#\u5EFA\u7ACB\u94FE\u8868" aria-hidden="true">#</a></h2><h3 id="\u5934\u63D2\u6CD5" tabindex="-1">\u5934\u63D2\u6CD5 <a class="header-anchor" href="#\u5934\u63D2\u6CD5" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>LinkList <span class="token function">CreateList</span><span class="token punctuation">(</span>LinkLIst <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    L<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LNode <span class="token operator">*</span>S<span class="token punctuation">,</span>L<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        s<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span>
        s<span class="token operator">-&gt;</span>next<span class="token operator">=</span>L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        L<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> L<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><p>// \u4E00\u76F4\u4ECE\u5934\u5F00\u59CB\u63D2\u5165\u7ED3\u70B9\uFF0C\u94FE\u8868\u987A\u5E8F\u4E0E\u8F93\u5165\u987A\u5E8F\u76F8\u53CD</p><h3 id="\u5C3E\u63D2\u6CD5" tabindex="-1">\u5C3E\u63D2\u6CD5 <a class="header-anchor" href="#\u5C3E\u63D2\u6CD5" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>LinkList <span class="token function">CreateList</span><span class="token punctuation">(</span>LinkLIst <span class="token operator">&amp;</span>L<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">int</span> x<span class="token punctuation">;</span>
    L<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    LNode <span class="token operator">*</span>S<span class="token punctuation">,</span><span class="token operator">*</span>r<span class="token operator">=</span>L<span class="token punctuation">;</span>
    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>x<span class="token operator">!=</span><span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        s<span class="token operator">=</span><span class="token punctuation">(</span>LinkList<span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>LNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        s<span class="token operator">-&gt;</span>data<span class="token operator">=</span>x<span class="token punctuation">;</span>
        r<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>
        r<span class="token operator">=</span>s<span class="token punctuation">;</span>
        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">&quot;%d&quot;</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    r<span class="token operator">-&gt;</span>next<span class="token operator">=</span><span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> L<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u67E5\u627E" tabindex="-1">\u67E5\u627E <a class="header-anchor" href="#\u67E5\u627E" aria-hidden="true">#</a></h3><h4 id="\u6309\u5E8F\u53F7" tabindex="-1">\u6309\u5E8F\u53F7 <a class="header-anchor" href="#\u6309\u5E8F\u53F7" aria-hidden="true">#</a></h4><div class="language-c"><pre><code>LNode<span class="token operator">*</span> <span class="token function">GetElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">{</span>
    LNode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> L<span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p\uFF01<span class="token operator">=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
        j<span class="token operator">++</span><span class="token punctuation">;</span> 
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>   
<span class="token punctuation">}</span>

</code></pre></div><h4 id="\u6309\u503C" tabindex="-1">\u6309\u503C <a class="header-anchor" href="#\u6309\u503C" aria-hidden="true">#</a></h4><div class="language-c"><pre><code>LNode<span class="token operator">*</span> <span class="token function">LocatElem</span><span class="token punctuation">(</span>LinkList L<span class="token punctuation">,</span><span class="token keyword">int</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>
    LNode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-</span>next<span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token constant">NULL</span><span class="token operator">&amp;&amp;</span>p<span class="token operator">-&gt;</span>data<span class="token operator">!=</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> p<span class="token punctuation">;</span>   
<span class="token punctuation">}</span>
</code></pre></div><h3 id="\u63D2\u5165-1" tabindex="-1">\u63D2\u5165 <a class="header-anchor" href="#\u63D2\u5165-1" aria-hidden="true">#</a></h3><p>new s</p><div class="language-c"><pre><code>p<span class="token operator">=</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span> <span class="token comment">//\u540E\u63D2</span>

<span class="token comment">//\u5982\u8981\u5B9E\u73B0\u524D\u63D2\uFF0C\u53EF\u5728\u540E\u63D2\u57FA\u7840\u4E0A\u4EA4\u6362\u6570\u636E\u57DF</span>
</code></pre></div><h3 id="\u5220\u9664-1" tabindex="-1">\u5220\u9664 <a class="header-anchor" href="#\u5220\u9664-1" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>\u68C0\u67E5\u5408\u6CD5\u6027\uFF0C\u627E\u5230\u7B2Ci<span class="token operator">-</span><span class="token number">1</span>\u4E2A\u7ED3\u70B9
p<span class="token operator">=</span><span class="token function">GetElem</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
q<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>next<span class="token operator">=</span>q<span class="token operator">-</span>next<span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre></div><h3 id="\u6C42\u8868\u957F" tabindex="-1">\u6C42\u8868\u957F <a class="header-anchor" href="#\u6C42\u8868\u957F" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>\u5224\u65AD\u662F\u5426\u4E3A\u7A7A\uFF0C\u5206\u662F\u5426\u5E26\u5934\u8282\u70B9
    LNode <span class="token operator">*</span>p<span class="token operator">=</span>L<span class="token operator">-</span>next<span class="token punctuation">;</span>
    <span class="token keyword">int</span> count<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>p<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span>
    <span class="token punctuation">{</span>
        p<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre></div><h2 id="\u53CC\u94FE\u8868" tabindex="-1">\u53CC\u94FE\u8868 <a class="header-anchor" href="#\u53CC\u94FE\u8868" aria-hidden="true">#</a></h2><h3 id="\u5B9A\u4E49-1" tabindex="-1">\u5B9A\u4E49 <a class="header-anchor" href="#\u5B9A\u4E49-1" aria-hidden="true">#</a></h3><div class="language-c"><pre><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">DNode</span><span class="token punctuation">{</span>
    ElemType data<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">DNode</span> <span class="token operator">*</span>prior<span class="token punctuation">,</span><span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>DNode<span class="token punctuation">,</span><span class="token operator">*</span>DLinkList<span class="token punctuation">;</span>
</code></pre></div><h3 id="\u63D2\u5165-2" tabindex="-1">\u63D2\u5165 <a class="header-anchor" href="#\u63D2\u5165-2" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>\u5728p\u540E\u63D2\u5165<span class="token operator">*</span>s\u7ED3\u70B9
p<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior<span class="token operator">=</span>s<span class="token punctuation">;</span>
s<span class="token operator">-&gt;</span>next<span class="token operator">=</span>p<span class="token operator">-&gt;</span>next<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>next<span class="token operator">=</span>s<span class="token punctuation">;</span>
s<span class="token operator">-&gt;</span>prior<span class="token operator">=</span>p<span class="token punctuation">;</span>
</code></pre></div><h3 id="\u5220\u9664-2" tabindex="-1">\u5220\u9664 <a class="header-anchor" href="#\u5220\u9664-2" aria-hidden="true">#</a></h3><div class="language-c"><pre><code>\u5220\u9664<span class="token operator">*</span>p\u540E\u4E00\u4E2A\u7ED3\u70B9<span class="token operator">*</span>q<span class="token punctuation">;</span>
p<span class="token operator">-&gt;</span>next<span class="token operator">=</span>q<span class="token operator">-</span>next<span class="token punctuation">;</span><span class="token punctuation">;</span>
q<span class="token operator">-&gt;</span>next<span class="token operator">-&gt;</span>prior<span class="token operator">=</span>p<span class="token punctuation">;</span>
<span class="token function">free</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span>

</code></pre></div><h2 id="\u5FAA\u73AF\u94FE\u8868" tabindex="-1">\u5FAA\u73AF\u94FE\u8868 <a class="header-anchor" href="#\u5FAA\u73AF\u94FE\u8868" aria-hidden="true">#</a></h2><p>\u672B\u5C3E\u6307\u9488\u6307\u5411\u5934\u8282\u70B9</p><h2 id="\u53CC\u5411\u5FAA\u73AF\u94FE\u8868" tabindex="-1">\u53CC\u5411\u5FAA\u73AF\u94FE\u8868 <a class="header-anchor" href="#\u53CC\u5411\u5FAA\u73AF\u94FE\u8868" aria-hidden="true">#</a></h2><p>\u5728\u5355\u5411\u57FA\u7840\u4E0A\u52A0\u4E0A\u5934\u8282\u70B9\u6307\u5411\u672B\u5C3E\u7684 *p\u4E3A\u5C3E\u8282\u70B9 p-&gt;next==L,\u5934\u7ED3\u70B9prior\u57DF\u548Cnext\u57DF\u5747\u4E3AL\uFF08\u8FD9\u4E2A\u94FE\u8868\u81EA\u5DF1\uFF09</p><h2 id="\u9759\u6001\u94FE\u8868" tabindex="-1">\u9759\u6001\u94FE\u8868 <a class="header-anchor" href="#\u9759\u6001\u94FE\u8868" aria-hidden="true">#</a></h2><h2 id="\u987A\u5E8F\u8868\u548C\u94FE\u8868\u7684\u6BD4\u8F83" tabindex="-1">\u987A\u5E8F\u8868\u548C\u94FE\u8868\u7684\u6BD4\u8F83 <a class="header-anchor" href="#\u987A\u5E8F\u8868\u548C\u94FE\u8868\u7684\u6BD4\u8F83" aria-hidden="true">#</a></h2><p>\u57FA\u4E8E\u50A8\u5B58\uFF0C\u8FD0\u7B97\uFF0C\u73AF\u5883\u4E09\u65B9\u9762\u8003\u8651</p>`,48),e=[o];function c(l,u,r,k,i,d){return s(),a("div",null,e)}var L=n(t,[["render",c]]);export{g as __pageData,L as default};
