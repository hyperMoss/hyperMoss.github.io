import{_ as n,c as s,o as a,a as p}from"./app.9b28d632.js";const f='{"title":"JS\u6392\u5E8F\u7B97\u6CD5","description":"","frontmatter":{},"headers":[{"level":2,"title":"\u76EE\u7684","slug":"\u76EE\u7684"},{"level":2,"title":"\u57FA\u7840\u77E5\u8BC6","slug":"\u57FA\u7840\u77E5\u8BC6"},{"level":2,"title":"\u5192\u6CE1\u6392\u5E8F","slug":"\u5192\u6CE1\u6392\u5E8F"},{"level":2,"title":"\u9009\u62E9\u6392\u5E8F","slug":"\u9009\u62E9\u6392\u5E8F"},{"level":2,"title":"\u63D2\u5165\u6392\u5E8F","slug":"\u63D2\u5165\u6392\u5E8F"},{"level":2,"title":"\u5F52\u5E76\u6392\u5E8F","slug":"\u5F52\u5E76\u6392\u5E8F"},{"level":2,"title":"\u5FEB\u901F\u6392\u5E8F","slug":"\u5FEB\u901F\u6392\u5E8F"},{"level":2,"title":"\u53C2\u8003","slug":"\u53C2\u8003"}],"relativePath":"docs/blog/note/js-sort.md","lastUpdated":1651848170934}',t={},o=p(`<h1 id="js\u6392\u5E8F\u7B97\u6CD5" tabindex="-1">JS\u6392\u5E8F\u7B97\u6CD5 <a class="header-anchor" href="#js\u6392\u5E8F\u7B97\u6CD5" aria-hidden="true">#</a></h1><h2 id="\u76EE\u7684" tabindex="-1">\u76EE\u7684 <a class="header-anchor" href="#\u76EE\u7684" aria-hidden="true">#</a></h2><p>\u6700\u8FD1\u4E0D\u662F\u5728\u6478\u524D\u7AEF\u7684JavaScript\u4E48,\u540C\u65F6\u4E5F\u5728\u51C6\u5907\u7B14\u8BD5,\u8FD9\u6837\u5E72\u8106\u628A\u8FD9\u4E2A\u8FC7\u7A0B\u8BB0\u5F55\u4E0B\u6765\u7B97\u4E86.</p><p>\u9762\u8BD5\u4E2D\u7279\u522B\u662F\u5927\u516C\u53F8\u7684\u9762\u8BD5\u7B97\u6CD5\u5F80\u5F80\u662F\u7231\u8003\u5BDF\u7684\u70B9,\u56E0\u4E3A\u7B97\u6CD5\u6700\u80FD\u7B80\u5355\u76F4\u89C2\u7684\u533A\u5206\u4EBA\u624D.</p><p>\u6240\u4EE5,\u5C06\u6700\u5E38\u4F7F\u7528\u7684\u5341\u5927\u6392\u5E8F\u7B97\u6CD5\u8BD5\u7740\u7528JavaScript\u6765\u63CF\u5199\u4E0B</p><h2 id="\u57FA\u7840\u77E5\u8BC6" tabindex="-1">\u57FA\u7840\u77E5\u8BC6 <a class="header-anchor" href="#\u57FA\u7840\u77E5\u8BC6" aria-hidden="true">#</a></h2><ul><li><strong>\u65F6\u95F4\u590D\u6742\u5EA6</strong>: \u53EF\u4EE5\u7B80\u5355\u7406\u89E3\u4E3A\u7B97\u6CD5\u6267\u884C\u6240\u8017\u8D39\u7684\u65F6\u95F4,\u4E00\u822C\u7528\u5927O\u7B26\u53F7\u6765\u8868\u793A</li><li><strong>\u7A7A\u95F4\u590D\u6742\u5EA6</strong>: \u8FD0\u884C\u5B8C\u4E00\u4E2A\u7A0B\u5E8F\u6240\u9700\u8981\u5185\u5B58\u7684\u5927\u5C0F</li><li><strong>\u6392\u5E8F\u7684\u7A33\u5B9A\u6027</strong>:\u6392\u5E8F\u540E,\u4E24\u4E2A\u76F8\u540C\u7684\u5143\u7D20\u524D\u540E\u4F4D\u7F6E\u4E0D\u505A\u53D8\u52A8,\u5219\u7B97\u6CD5\u662F\u7A33\u5B9A\u7684</li></ul><p>\u4EA4\u6362\u64CD\u4F5C\u7684\u51FD\u6570\u8868\u8FBE</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token parameter">ary<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y</span><span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment">//ary\u4E3A\u6570\u7EC4 x,y\u4E3A\u6570\u5B57</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span> <span class="token keyword">return</span>  <span class="token comment">//\u82E5\u76F8\u7B49\u4E0D\u505A\u64CD\u4F5C</span>
    <span class="token keyword">var</span> temp <span class="token operator">=</span> ary<span class="token punctuation">[</span>x<span class="token punctuation">]</span>  <span class="token comment">// \u8BBE\u7F6E\u4E2D\u95F4\u53D8\u91CF</span>
    ary<span class="token punctuation">[</span>x<span class="token punctuation">]</span> <span class="token operator">=</span> ary<span class="token punctuation">[</span>y<span class="token punctuation">]</span>   <span class="token comment">//\u4EA4\u6362</span>
    ary<span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> temp
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u5192\u6CE1\u6392\u5E8F" tabindex="-1">\u5192\u6CE1\u6392\u5E8F <a class="header-anchor" href="#\u5192\u6CE1\u6392\u5E8F" aria-hidden="true">#</a></h2><p>\u76F8\u4FE1\u6240\u6709\u4EBA\u521A\u5F00\xB7\u59CB\u5B66\u6392\u5E8F\u90FD\u662F\u4ECE\u5192\u6CE1\u6392\u5E8F\u5F00\u59CB\u7684,\u4E24\u4E2A\u5FAA\u73AF\u5C31\u53EF\u641E\u5B9A.</p><p>\u5C0F\u5FAA\u73AF\u6BD4\u8F83\u76F8\u90BB\u4E24\u4F4D\u7684\u5927\u5C0F,\u5982\u679C\u524D\u5927\u540E\u5C0F\u5C31\u8FDB\u884C\u4EA4\u6362</p><p>\u5927\u5FAA\u73AF\u4FDD\u8BC1\u4E86\u6392\u5E8F\u7684\u6B63\u786E\u5B9E\u73B0,\u901A\u8FC7\u5927\u5FAA\u73AF\u4FDD\u8BC1\u6BCF\u6B21\u90FD\u4F1A\u6709\u4E00\u4E2A\u5728\u5927\u5FAA\u73AF\u5185\u6700\u5927\u7684\u6570\u88AB\u79FB\u5230\u5927\u5FAA\u73AF\u7684\u6700\u540E\u90E8\u5206</p><div class="language-js"><pre><code>        <span class="token keyword">function</span> <span class="token function">bubbleSort1</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">var</span> l <span class="token operator">=</span> ary<span class="token punctuation">.</span>length
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>l<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;=</span>l<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&gt;</span>ary<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span>j<span class="token punctuation">,</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> ary
        <span class="token punctuation">}</span>
</code></pre></div><p>\u540C\u6837\u7684\u5982\u679C\u5728\u4E00\u6B21\u5B50\u5FAA\u73AF\u4E2D\u6CA1\u6709\u6267\u884C\u4EA4\u6362\u7684\u8BDD,\u53EF\u4EE5\u9002\u5F53\u7684\u8DF3\u51FA\u5927\u5FAA\u73AF\u5373\u53EF,\u8FD9\u6837\u53EF\u4EE5\u8BBE\u7F6E\u6807\u5FD7\u4F4D</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">bubbleSort1</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> flag
            <span class="token keyword">var</span> l <span class="token operator">=</span> ary<span class="token punctuation">.</span>length
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> l <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&gt;</span> ary<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> j<span class="token punctuation">,</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
                        flag <span class="token operator">=</span> <span class="token boolean">true</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> ary
        <span class="token punctuation">}</span>
</code></pre></div><h2 id="\u9009\u62E9\u6392\u5E8F" tabindex="-1">\u9009\u62E9\u6392\u5E8F <a class="header-anchor" href="#\u9009\u62E9\u6392\u5E8F" aria-hidden="true">#</a></h2><p>\u9009\u62E9\u6392\u5E8F\u8FFD\u6C42\u7684\u662F\u4E00\u6B21\u5230\u4F4D,\u5143\u7D20\u5728\u6BCF\u6B21\u79FB\u52A8\u65F6\u5C31\u5DF2\u7ECF\u5230\u8FBE\u4ED6\u5728\u5DF2\u6392\u597D\u5E8F\u5217\u4E2D\u7684\u6700\u7EC8\u4F4D\u7F6E.</p><p>\u901A\u8FC7\u9009\u62E9\u51FA\u6700\u5C0F\u7684\u79FB\u51FA\u5230\u6709\u5E8F\u533A\uFF0C\u518D\u4ECE\u65E0\u5E8F\u533A\u9009\u62E9\u51FA\u6700\u5C0F\u7684\uFF0C\u5982\u6B64\u7C7B\u63A8\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">selectSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> l <span class="token operator">=</span> ary<span class="token punctuation">.</span>length
            <span class="token keyword">var</span> min
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                min <span class="token operator">=</span> i
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> l<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> ary<span class="token punctuation">[</span>min<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        min <span class="token operator">=</span> j
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> i<span class="token punctuation">,</span> min<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> ary
        <span class="token punctuation">}</span>
</code></pre></div><h2 id="\u63D2\u5165\u6392\u5E8F" tabindex="-1">\u63D2\u5165\u6392\u5E8F <a class="header-anchor" href="#\u63D2\u5165\u6392\u5E8F" aria-hidden="true">#</a></h2><p>\u540C\u6837\u5206\u4E3A\u6709\u5E8F\u533A\u548C\u65E0\u5E8F\u533A\uFF0C\u4E0D\u540C\u7684\u662F\u5BF9\u5143\u7D20\u7684\u64CD\u4F5C\u65B9\u5F0F\uFF0C\u8FD9\u4E2A\u53EA\u4ECE\u65E0\u5E8F\u533A\u4E2D\u9009\u62E9\u51FA\u4E00\u4E2A\uFF0C\u653E\u5165\u6709\u5E8F\u533A\u7684\u5408\u9002\u4F4D\u7F6E\u3002</p><p>\u6709\u70B9\u50CF\u5C0F\u65F6\u5019\u6392\u961F\u7684\u65F6\u5019\uFF0C\u7528\u8EAB\u9AD8\u6765\u8FDB\u884C\u6BD4\u8F83\uFF0C\u9009\u51FA\u4E00\u4E2A\u63D2\u5165\u5230\u5408\u9002\u7684\u5730\u65B9\u53BB\u3002</p><p>\u4E8E\u662F\u5206\u4E3A\u4E86\u6709\u5E8F\u533A\uFF0C\u548C\u6709\u5E8F\u533A\u3002</p><p>\u4ECE\u6709\u5E8F\u533A\u9009\u62E9\u4E00\u4E2A\u653E\u5165\u6709\u5E8F\u533A\uFF0C\u8FD9\u91CC\u53EF\u4EE5\u4F7F\u7528\u4E8C\u5206\u6CD5\u8FDB\u884C\u4F18\u5316\u3002</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">insertionSort</span><span class="token punctuation">(</span><span class="token parameter">arr</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> <span class="token number">1</span> <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">var</span> preIndex<span class="token punctuation">,</span> current<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u4E8C\u5206\u7248\u672C</p><p>\u8FD9\u4E2A<code>reduce</code>\u6709\u70B9\u5751\u7684\uFF0C\u7F51\u4E0A\u770B\u7684\u4ED6\u4EBA\u7684\uFF0C\u5927\u6982\u610F\u601D\u662F\u904D\u5386ary\u5143\u7D20\uFF0C\u5C06ary\u7684\u6BCF\u4E2A\u5143\u7D20\u63D2\u5165\u540E\u9762\u7684[]\u7A7A\u6570\u7EC4\u4E2D\u3002</p><p>\u5176\u5B9E\u5199\u4E2A\u5FAA\u73AF\u4E5F\u53EF\u4EE5</p><div class="language-js"><pre><code>  <span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> sortAry<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">insert</span><span class="token punctuation">(</span>sortAry<span class="token punctuation">,</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> sortAry<span class="token punctuation">;</span>

        <span class="token punctuation">}</span>
</code></pre></div><div class="language-js"><pre><code>        <span class="token keyword">function</span> <span class="token function">insertSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span>insert<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>


        <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token parameter">sortAry<span class="token punctuation">,</span> val</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> l <span class="token operator">=</span> sortAry<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                sortAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> sortAry<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">var</span> low <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>
                high <span class="token operator">=</span> l<span class="token punctuation">,</span>
                mid<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> sortAry<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> sortAry<span class="token punctuation">.</span><span class="token function">unshift</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> sortAry<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;=</span> sortAry<span class="token punctuation">[</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">return</span> sortAry<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">,</span> sortAry<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span>low <span class="token operator">&lt;</span> high<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                mid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> mid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> sortAry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    high <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">==</span> sortAry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    i <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> sortAry<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    low <span class="token operator">=</span> mid<span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">var</span> midArry <span class="token operator">=</span> <span class="token punctuation">[</span>val<span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> lastArry <span class="token operator">=</span> sortAry<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
            sortAry <span class="token operator">=</span> sortAry<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> low <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>midArry<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>lastArry<span class="token punctuation">)</span>
            <span class="token keyword">return</span> sortAry
        <span class="token punctuation">}</span>
</code></pre></div><h2 id="\u5F52\u5E76\u6392\u5E8F" tabindex="-1">\u5F52\u5E76\u6392\u5E8F <a class="header-anchor" href="#\u5F52\u5E76\u6392\u5E8F" aria-hidden="true">#</a></h2><p>\u8FD9\u4E2A\u6392\u5E8F\u6709\u70B9\u4E1C\u897F\u7684\uFF0C\u4F7F\u7528\u4E86\u5206\u6CBB\u7684\u601D\u60F3\uFF0C\u5C06\u4E0A\u9762\u7684\u4E8C\u5206\u6CD5\u6D3B\u5B66\u6D3B\u7528\uFF0C\u5177\u4F53\u6765\u8BF4\u5C31\u662F\u9012\u5F52\u7684\u4F7F\u7528\u5F52\u5E76\u6392\u5E8F\uFF0C\u5176\u5B9E\u5C31\u662F\u518D\u4E24\u4E24\u6BD4\u8F83\u65F6\u80FD\u5F88\u5FEB\u7684\u5F97\u51FA\u8C01\u5728\u524D\u8C01\u5728\u540E\uFF0C\u628A\u8FD9\u4E2A\u4E24\u4E24\u7ED9\u6269\u5927\u4E86\uFF0C\u5E8F\u5217\u9010\u6B65\u6709\u5E8F\u5316</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">var</span> min <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span>
                <span class="token keyword">var</span> left <span class="token operator">=</span><span class="token function">mergeSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

                <span class="token keyword">while</span> <span class="token punctuation">(</span>left<span class="token punctuation">.</span>length<span class="token operator">&amp;&amp;</span>right<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;=</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>left<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>right<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">...</span>left<span class="token punctuation">,</span><span class="token operator">...</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> result<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
</code></pre></div><h2 id="\u5FEB\u901F\u6392\u5E8F" tabindex="-1">\u5FEB\u901F\u6392\u5E8F <a class="header-anchor" href="#\u5FEB\u901F\u6392\u5E8F" aria-hidden="true">#</a></h2><p>\u5FEB\u6392\u662F\u5F88\u7ECF\u5178\u7684\u6392\u5E8F\u4E86\uFF0C\u601D\u60F3\u4E5F\u5229\u7528\u4E86\u5206\u6CBB\u7684\u601D\u60F3</p><ul><li><p>\u9009\u62E9\u4E00\u4E2A\u5143\u7D20\uFF0C\u79F0\u4E3A\u54E8\u5175\uFF08pivot\uFF09</p></li><li><p>\u5C06\u6570\u7EC4\u4E2D\u5206\u6210\u4E24\u4E2A\u4E32\uFF0C\u6240\u6709\u6BD4\u54E8\u5175\u5C0F\u7684\u653E\u524D\u9762\uFF0C\u6BD4\u54E8\u5175\u5927\u7684\u653E\u540E\u9762\uFF0C\u518D\u8FD9\u4E2A\u64CD\u4F5C\u5B8C\u6210\u540E\u8FD9\u4E2A\u54E8\u5175\u5C31\u4F4D\u4E8E\u6570\u5217\u7684\u4E2D\u95F4\u4F4D\u7F6E\uFF0C\u8FD9\u4E2A\u88AB\u79F0\u4E3A\u5206\u533A\uFF08partition\uFF09\u64CD\u4F5C\u3002</p></li><li><p>\u9012\u5F52\u7684\u628A\u5C0F\u4E8E\u54E8\u5175\u7684\u5B50\u6570\u5217\u548C\u5927\u4E8E\u54E8\u5175\u7684\u5B50\u6570\u5217\u8FDB\u884C\u6392\u5E8F\u3002</p></li></ul><p>\u975E\u9012\u5F52\u7248\u672C</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">quickSort</span><span class="token punctuation">(</span><span class="token parameter">ary</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>ary<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> ary<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">var</span> pivot <span class="token operator">=</span> ary<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">]</span>
  <span class="token keyword">var</span> left <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">var</span> middle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">var</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ary<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> val <span class="token operator">=</span> ary<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      left<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      middle<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&gt;</span> pivot<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      right<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>middle<span class="token punctuation">,</span> <span class="token function">quickSort</span><span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><p>\u9012\u5F52\u7248\u672C</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">quickSort1</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> <span class="token function-variable function">comparator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token function">partition</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> comparator<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token parameter">ary<span class="token punctuation">,</span> comparator<span class="token punctuation">,</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">=</span> ary<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span></span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">&gt;=</span> end<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">var</span> pivotIndex <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> start<span class="token punctuation">)</span>
  <span class="token keyword">var</span> pivot <span class="token operator">=</span> ary<span class="token punctuation">[</span>pivotIndex<span class="token punctuation">]</span>

  <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> pivotIndex<span class="token punctuation">,</span> end<span class="token punctuation">)</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> start <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> start<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">comparator</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> pivot<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      i<span class="token operator">++</span>
      <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>

  <span class="token function">swap</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  <span class="token function">partition</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> comparator<span class="token punctuation">,</span> start<span class="token punctuation">,</span> i<span class="token punctuation">)</span>
  <span class="token function">partition</span><span class="token punctuation">(</span>ary<span class="token punctuation">,</span> comparator<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span>
  <span class="token keyword">return</span> ary
<span class="token punctuation">}</span>

</code></pre></div><h2 id="\u53C2\u8003" tabindex="-1">\u53C2\u8003 <a class="header-anchor" href="#\u53C2\u8003" aria-hidden="true">#</a></h2><p><a href="https://juejin.im/post/5c8532ec6fb9a049a42fdd81?utm_source=gold_browser_extension#heading-4" target="_blank" rel="noopener noreferrer">https://juejin.im/post/5c8532ec6fb9a049a42fdd81?utm_source=gold_browser_extension#heading-4</a></p>`,43),c=[o];function e(u,l,k,r,i,d){return a(),s("div",null,c)}var w=n(t,[["render",e]]);export{f as __pageData,w as default};
