import{o as n,c as s,a,b as t,d as p}from"./app.26bcd9b6.js";const e='{"title":"正则表达式+小前端的笔试题2","description":"","frontmatter":{"title":"正则表达式+小前端的笔试题2","date":"2019-03-24T15:55:23.000Z","tags":["Date Structure","JavaScript","RegExp"]},"headers":[{"level":2,"title":"创建正则表达式","slug":"创建正则表达式"},{"level":2,"title":"编写正则表达式","slug":"编写正则表达式"},{"level":3,"title":"使用简单模式","slug":"使用简单模式"},{"level":3,"title":"使用特殊字符","slug":"使用特殊字符"},{"level":3,"title":"使用插入语","slug":"使用插入语"},{"level":2,"title":"使用正则表达式","slug":"使用正则表达式"},{"level":2,"title":"笔试题","slug":"笔试题"},{"level":3,"title":"求字符串中最大的回文子串","slug":"求字符串中最大的回文子串"},{"level":3,"title":"数字转英文","slug":"数字转英文"}],"relativePath":"blog/interview2.md","lastUpdated":1625451924563}',o={},c=t("p",null,"这次记录了下老姐二面富途笔试题，以及我看正则表达式的一些总结",-1),l=p('<h2 id="创建正则表达式"><a class="header-anchor" href="#创建正则表达式" aria-hidden="true">#</a> 创建正则表达式</h2><p>使用一个正则表达式字面量，其由包含在斜杠之间的模式组成</p><div class="language-js"><pre><code><span class="token comment">/*\n   /pattern/flags\n*/</span>\n\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">ab+c</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> regex <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]+[0-9]*\\W?_$</span><span class="token regex-delimiter">/</span><span class="token regex-flags">gi</span></span><span class="token punctuation">;</span>\n</code></pre></div><p>此法可获得更好的性能</p><p>调用RegExp对象的构造函数,如下所示</p><div class="language-js"><pre><code><span class="token comment">/* \n    new RegExp(pattern [, flags])\n*/</span>\n\n<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;ab+c&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^[a-zA-Z]+[0-9]*\\W?_$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&quot;gi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> regex <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">&quot;^[a-zA-Z]+[0-9]*\\\\W?_$&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;gi&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>使用构造函数时,当你知道正则有可能改变,或者由另一个输入时推荐,以上的flags大概代表着正则的标志位,应用于不同的模式</p><h2 id="编写正则表达式"><a class="header-anchor" href="#编写正则表达式" aria-hidden="true">#</a> 编写正则表达式</h2><p>正则表达式初衷是为了方便人们处理字符串,于是由各种各样的匹配逻辑.</p><h3 id="使用简单模式"><a class="header-anchor" href="#使用简单模式" aria-hidden="true">#</a> 使用简单模式</h3><p>只是需要直接匹配一个字母,或空格,符号或者一个字符串的时候,可以使用<code>/abc/</code>这样的简单逻辑去匹配.</p><h3 id="使用特殊字符"><a class="header-anchor" href="#使用特殊字符" aria-hidden="true">#</a> 使用特殊字符</h3><p>如果需要匹配的比直接匹配包含更多条件的字符串的时候,这时模式要包含特殊字符.</p><p>比如<code>/ab*c</code>匹配包含a和c中间存在0个或多个b的字符串</p><p>mdn的特殊字符表</p><p>|</p><h3 id="使用插入语"><a class="header-anchor" href="#使用插入语" aria-hidden="true">#</a> 使用插入语</h3><p>任何正则表达式的插入语都会使这部分匹配的副字符串被记忆。一旦被记忆，这个副字符串就可以被调用于其它用途，如同 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions#%E4%BD%BF%E7%94%A8%E6%8B%AC%E5%8F%B7%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D" target="_blank" rel="noopener noreferrer">使用括号的子字符串匹配</a>之中所述。</p><p>比如， <code>/Chapter (\\d+)\\.\\d*/</code> 解释了额外转义的和特殊的字符，并说明了这部分pattern应该被记忆。它精确地匹配后面跟着一个以上数字字符的字符 &#39;Chapter &#39; (<code>\\d</code> 意为任何数字字符，<code>+ 意为1次以上</code>)，跟着一个小数点（在这个字符中本身也是一个特殊字符；小数点前的 \\ 意味着这个pattern必须寻找字面字符 &#39;.&#39;)，跟着任何数字字符0次以上。 (<code>\\d</code> 意为数字字符， <code>*</code> 意为0次以上)。另外，插入语也用来记忆第一个匹配的数字字符。</p><p>此模式可以匹配字符串&quot;Open Chapter 4.3, paragraph 6&quot;，并且&#39;4&#39;将会被记住。此模式并不能匹配&quot;Chapter 3 and 4&quot;，因为在这个字符串中&#39;3&#39;的后面没有点号&#39;.&#39;。</p><p>括号中的&quot;?:&quot;，这种模式匹配的子字符串将不会被记住。比如，(?:\\d+)匹配一次或多次数字字符，但是不能记住匹配的字符。</p><h2 id="使用正则表达式"><a class="header-anchor" href="#使用正则表达式" aria-hidden="true">#</a> 使用正则表达式</h2><p>正则表达式可以被用于<code>RegExp</code>的<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/RegExp/exec" target="_blank" rel="noopener noreferrer"><code>exec</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/RegExp/test" target="_blank" rel="noopener noreferrer"><code>test</code></a>方法以及 <a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String" target="_blank" rel="noopener noreferrer"><code>String</code></a>的<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/match" target="_blank" rel="noopener noreferrer"><code>match</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/replace" target="_blank" rel="noopener noreferrer"><code>replace</code></a>、<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/search" target="_blank" rel="noopener noreferrer"><code>search</code></a>和<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference/Global_Objects/String/split" target="_blank" rel="noopener noreferrer"><code>split</code></a>方法。这些方法在<a href="https://developer.mozilla.org/zh-CN/docs/JavaScript/Reference" target="_blank" rel="noopener noreferrer">JavaScript 手册</a>中有详细的解释。</p><table><thead><tr><th style="text-align:left;">方法</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>exec</code></td><td style="text-align:left;">一个在字符串中执行查找匹配的RegExp方法，它返回一个数组（未匹配到则返回null）。</td></tr><tr><td style="text-align:left;"><code>test</code></td><td style="text-align:left;">一个在字符串中测试是否匹配的RegExp方法，它返回true或false。</td></tr><tr><td style="text-align:left;"><code>match</code></td><td style="text-align:left;">一个在字符串中执行查找匹配的String方法，它返回一个数组或者在未匹配到时返回null。</td></tr><tr><td style="text-align:left;"><code>search</code></td><td style="text-align:left;">一个在字符串中测试匹配的String方法，它返回匹配到的位置索引，或者在失败时返回-1。</td></tr><tr><td style="text-align:left;"><code>replace</code></td><td style="text-align:left;">一个在字符串中执行查找匹配的String方法，并且使用替换字符串替换掉匹配到的子字符串。</td></tr><tr><td style="text-align:left;"><code>split</code></td><td style="text-align:left;">一个使用正则表达式或者一个固定字符串分隔一个字符串，并将分隔后的子字符串存储到数组中的String方法。</td></tr></tbody></table><p>当你想要知道在一个字符串中的一个匹配是否被找到，你可以使用test或search方法；想得到更多的信息（但是比较慢）则可以使用exec或match方法。如果你使用exec或match方法并且匹配成功了，那么这些方法将返回一个数组并且更新相关的正则表达式对象的属性和预定义的正则表达式对象（详见下）。如果匹配失败，那么exec方法返回null（也就是false）。</p><div class="language-html"><pre><code>var myRe = /d(b+)d/g;\nvar myArray = myRe.exec(&quot;cdbbdbsbz&quot;);\n</code></pre></div><p>不需要正则表达式的属性</p><div class="language-html"><pre><code>var myArray = /d(b+)d/g.exec(&quot;cdbbdbsbz&quot;);\n</code></pre></div><p>通过字符串构建正则</p><div class="language-html"><pre><code>var myRe = new RegExp(&quot;d(b+)d&quot;, &quot;g&quot;);\nvar myArray = myRe.exec(&quot;cdbbdbsbz&quot;);\n</code></pre></div><h2 id="笔试题"><a class="header-anchor" href="#笔试题" aria-hidden="true">#</a> 笔试题</h2><p>这里都是老姐的上次的笔试题更新一下把</p><h3 id="求字符串中最大的回文子串"><a class="header-anchor" href="#求字符串中最大的回文子串" aria-hidden="true">#</a> 求字符串中最大的回文子串</h3><div class="language-js"><pre><code>\n<span class="token keyword">function</span> <span class="token function">han</span><span class="token punctuation">(</span><span class="token parameter">str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n        <span class="token keyword">let</span> maxlength<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> start <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> arr <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">let</span> len <span class="token operator">=</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n        <span class="token comment">//以i为中心向两边扩展</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token keyword">let</span> k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;</span>maxlength<span class="token punctuation">)</span><span class="token punctuation">{</span>\n              maxlength<span class="token operator">=</span>k<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n              start<span class="token operator">=</span>j<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            j<span class="token operator">--</span><span class="token punctuation">;</span>\n            k<span class="token operator">++</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token comment">//以i,i+1向两边扩展</span>\n        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">let</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>\n          <span class="token keyword">let</span> k<span class="token operator">=</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n          <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&gt;=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>k<span class="token operator">&lt;</span>len<span class="token operator">&amp;&amp;</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">===</span>arr<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n            <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&gt;</span>maxlength<span class="token punctuation">)</span><span class="token punctuation">{</span>\n              maxlength<span class="token operator">=</span>k<span class="token operator">-</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>\n              start<span class="token operator">=</span>j<span class="token punctuation">;</span>\n            <span class="token punctuation">}</span>\n            j<span class="token operator">--</span><span class="token punctuation">;</span>\n            k<span class="token operator">++</span><span class="token punctuation">;</span>\n          <span class="token punctuation">}</span>\n        <span class="token punctuation">}</span>\n        <span class="token keyword">if</span><span class="token punctuation">(</span>maxlength<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n          <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span>maxlength<span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>\n          <span class="token keyword">return</span> <span class="token keyword">null</span>\n        <span class="token punctuation">}</span>\n     <span class="token punctuation">}</span>\n\n     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">han</span><span class="token punctuation">(</span><span class="token string">&#39;hannab&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre></div><h3 id="数字转英文"><a class="header-anchor" href="#数字转英文" aria-hidden="true">#</a> 数字转英文</h3><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">numEn</span><span class="token punctuation">(</span><span class="token parameter">n</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  num <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> dict1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;one&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;three&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;four&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;five&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;six&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;seven&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eight&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;nine&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> dict2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;tne&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;twenty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;thirty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;forty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;fifty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sixty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;seventy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eighty&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ninty&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">let</span> dict3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;eleven&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;twelve&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;thirteen&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;14&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;15&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;16&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;17&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;18&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;19&#39;</span><span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dict1<span class="token punctuation">[</span>num<span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dict3<span class="token punctuation">[</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dict2<span class="token punctuation">[</span>num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39; &#39;</span> <span class="token operator">+</span> dict1<span class="token punctuation">[</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">]</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> dict1<span class="token punctuation">[</span>Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">&#39;hundred&#39;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token function">parse</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;and&#39;</span> <span class="token operator">+</span> <span class="token function">parse</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token string">&#39; &#39;</span><span class="token punctuation">)</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">1000000</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">parse</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&#39;thousand&#39;</span> <span class="token operator">+</span> <span class="token function">parse</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">1000</span><span class="token punctuation">)</span>\n\n<span class="token punctuation">}</span>\n</code></pre></div>',36);o.render=function(t,p,e,o,r,u){return n(),s("div",null,[c,a(" more "),l])};export default o;export{e as __pageData};
