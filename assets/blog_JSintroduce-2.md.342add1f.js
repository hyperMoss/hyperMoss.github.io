import{o as n,c as s,a,b as p,d as t}from"./app.26bcd9b6.js";const e='{"title":"A re-introduction to JavaScript读后感(2)","description":"","frontmatter":{"title":"A re-introduction to JavaScript读后感(2)","date":"2019-03-16T12:37:45.000Z","tags":["JavaScript","Summary"]},"headers":[{"level":2,"title":"Variables","slug":"variables"},{"level":2,"title":"Operators","slug":"operators"},{"level":2,"title":"Control structures","slug":"control-structures"},{"level":2,"title":"Objects","slug":"objects"},{"level":2,"title":"Arrays","slug":"arrays"}],"relativePath":"blog/JSintroduce-2.md","lastUpdated":1625451924559}',o={},c=p("p",null,"这次算是认真的看完了一个关于JavaScript的文档，在之前的时候都是老师随意的教一些方法和框架的用法，没有认真的读完一篇全英文的文档，今天也算是达到了一个小目标，从头到尾读了一篇。在这里我想把这件事做个总结，也检验一下我学到了什么。",-1),l=t('<h2 id="variables"><a class="header-anchor" href="#variables" aria-hidden="true">#</a> Variables</h2><p>说白了就三种变量关键字<code>let</code>,<code>const</code>,and<code>var</code>。在这三种变量中<code>let</code>和<code>const</code>是规定了代码块中的作用区域的，而var是函数外也可见的。如果声明了一个变量却没有给他赋值，他的类型一般是<code>undefined</code>。</p><div class="language-javascript"><pre><code><span class="token keyword">let</span> a<span class="token punctuation">;</span>\n<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token string">&#39;Simon&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-javascript"><pre><code><span class="token comment">// myLetVariable is *not* visible out here</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> myLetVariable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> myLetVariable <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> myLetVariable<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// myLetVariable is only visible in here</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// myLetVariable is *not* visible out here</span>\n</code></pre></div><div class="language-javascript"><pre><code><span class="token keyword">const</span> Pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span> <span class="token comment">// variable Pi is set </span>\nPi <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// will throw an error because you cannot change a constant variable.</span>\n</code></pre></div><div class="language-javascript"><pre><code><span class="token keyword">var</span> a<span class="token punctuation">;</span> \n<span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;Simon&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-javascript"><pre><code><span class="token comment">// myVarVariable *is* visible out here </span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> myVarVariable <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> myVarVariable <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> myVarVariable<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> \n  <span class="token comment">// myVarVariable is visible to the whole function </span>\n<span class="token punctuation">}</span> \n\n<span class="token comment">// myVarVariable *is* visible out here</span>\n</code></pre></div><p>从ECMAScript2015来<code>let</code>和<code>const</code>允许你声明一个代码块范围的变量。</p><h2 id="operators"><a class="header-anchor" href="#operators" aria-hidden="true">#</a> Operators</h2><p>JavaScript的操作我觉得和Java里的差不多就字符串上有些区别，+，-，*，/，%，这些都是基本的，还有+=，-=连加赋值和连减赋值。</p><div class="language-javascript"><pre><code>x <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>\nx <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>\n</code></pre></div><p>还有一个常用的++,--和其他语言大同小异。</p><p>总的来说还是很好上手的。</p><p>我没有体验过的则是<code>+</code>运算符，可以直接连接字符串，</p><div class="language-javascript"><pre><code><span class="token string">&#39;hello&#39;</span> <span class="token operator">+</span> <span class="token string">&#39; world&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;hello world&quot;</span>\n</code></pre></div><p>同时如果将数字和字符串使用+号的话，他会先按，算子的类型进行变换，以第一个算子的类型准</p><div class="language-javascript"><pre><code><span class="token string">&#39;3&#39;</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// &quot;345&quot;</span>\n <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">&#39;5&#39;</span><span class="token punctuation">;</span> <span class="token comment">// &quot;75&quot;</span>\n</code></pre></div><p>比较运算也是和常见的差不多<code>，&gt; ,&lt;,&lt;=</code>都有，其中有一些挺有趣的结论。</p><div class="language-javascript"><pre><code><span class="token number">123</span> <span class="token operator">==</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n<span class="token number">1</span> <span class="token operator">==</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div><p><code>==</code>这里默认是没有考虑类型的影响，需要进行类型的强比较的话可以使用<code>===</code></p><div class="language-javascript"><pre><code><span class="token number">123</span> <span class="token operator">===</span> <span class="token string">&#39;123&#39;</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token number">1</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// false</span>\n</code></pre></div><p>同理<code>&lt;=,&lt;==</code>也差不了8</p><h2 id="control-structures"><a class="header-anchor" href="#control-structures" aria-hidden="true">#</a> Control structures</h2><p>JavaScript的结构化控制和C家族的结构化语言很像，同样采用<code>if</code>,<code>else</code></p><div class="language-javascript"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> <span class="token string">&#39;kittens&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&#39;puppies&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  name <span class="token operator">+=</span> <span class="token string">&#39; woof&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">==</span> <span class="token string">&#39;kittens&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  name <span class="token operator">+=</span> <span class="token string">&#39; meow&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  name <span class="token operator">+=</span> <span class="token string">&#39;!&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nname <span class="token operator">==</span> <span class="token string">&#39;kittens meow&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>在循环方面也有<code>while</code>和<code>do-whilel</code>两种关键字，第一种是很好的基础循环，第二种除非你希望在最后循环还会再运行一次。出口的位置不同的问题罢了。</p><p>JavaScript的<code>for</code>和C和java的挺像的，一行代码即可写出一个循环结构体的控制块。</p><div class="language-javascript"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Will execute 5 times</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>for-in</p><div class="language-javascript"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> property <span class="token keyword">in</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with object property</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>同样利用逻辑选择符<code>||</code>,<code>&amp;&amp;</code>可以方便的进行简单的逻辑处理，可以有效地在进行处理之前确认空对象，</p><div class="language-javascript"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> o <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">var</span> name <span class="token operator">=</span> cachedName <span class="token operator">||</span> <span class="token punctuation">(</span>cachedName <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">var</span> allowed <span class="token operator">=</span> <span class="token punctuation">(</span>age <span class="token operator">&gt;</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token string">&#39;yes&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;no&#39;</span><span class="token punctuation">;</span>\n</code></pre></div><p>这是一个语法糖和C，Java差不多的。</p><p>同样<code>switch</code>可以通过选择数字和字符串来进行不同的分支。</p><div class="language-js"><pre><code><span class="token keyword">switch</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;draw&#39;</span><span class="token operator">:</span>\n    <span class="token function">drawIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token string">&#39;eat&#39;</span><span class="token operator">:</span>\n    <span class="token function">eatIt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token function">doNothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>如果没有加<code>break</code>在其后的话，在选择那一句后，下面的代码会继续进行执行。</p><p>一般会使用<code>default</code>语句来保证其选择的部分可预见性的进行处理。</p><p>在其内部比较的地方默认使用的是===</p><div class="language-js"><pre><code><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token function">yay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token function">neverhappens</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><h2 id="objects"><a class="header-anchor" href="#objects" aria-hidden="true">#</a> Objects</h2><p>JavaScript是一门面向对象的语言，对象可以通过命名的值进行匹配，就像...</p><ul><li>Dictionaries in Python.</li><li>Hashes in Perl and Ruby.</li><li>Hash tables in C and C++.</li><li>HashMaps in Java.</li><li>Associative arrays in PHP.</li></ul><p>在事实上，这种数据结构广泛的应用证明这种方式是多功能的，任何东西在JavaScript中都算做对象。</p><p>允许你创造任意复杂性的数据结构。</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>这两种声明方式在语义上是等价的。第二种更简洁和便捷。这种规则语法在JSON中也是核心的部位。</p><p>将一个对象进行实例化。</p><div class="language-js"><pre><code><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Carrot&#39;</span><span class="token punctuation">,</span>\n  <span class="token keyword">for</span><span class="token operator">:</span> <span class="token string">&#39;Max&#39;</span><span class="token punctuation">,</span> <span class="token comment">// &#39;for&#39; is a reserved word, use &#39;_for&#39; instead.</span>\n  details<span class="token operator">:</span> <span class="token punctuation">{</span>\n    color<span class="token operator">:</span> <span class="token string">&#39;orange&#39;</span><span class="token punctuation">,</span>\n    size<span class="token operator">:</span> <span class="token number">12</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div><p>属性的入口可以被联系起来。</p><div class="language-js"><pre><code>obj<span class="token punctuation">.</span>details<span class="token punctuation">.</span>color<span class="token punctuation">;</span> <span class="token comment">// orange</span>\nobj<span class="token punctuation">[</span><span class="token string">&#39;details&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;size&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 12</span>\n</code></pre></div><p>接下创建的是一个对象原型，和一个实例化的you</p><div class="language-js"><pre><code><span class="token keyword">function</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> age</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// Define an object</span>\n<span class="token keyword">var</span> you <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">&#39;You&#39;</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span> \n<span class="token comment">// We are creating a new person named &quot;You&quot; aged 24.</span>\n</code></pre></div><p>在建立过一次后，对象的属性可以被读取采用两种方式。</p><div class="language-js"><pre><code><span class="token comment">// dot notation</span>\nobj<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Simon&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> name <span class="token operator">=</span> obj<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n</code></pre></div><div class="language-js"><pre><code><span class="token comment">// bracket notation</span>\nobj<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Simon&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> name <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token comment">// can use a variable to define a key</span>\n<span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;what is your key?&#39;</span><span class="token punctuation">)</span>\nobj<span class="token punctuation">[</span>user<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">prompt</span><span class="token punctuation">(</span><span class="token string">&#39;what is its value?&#39;</span><span class="token punctuation">)</span>\n</code></pre></div><p>点记号法和括弧记号法。</p><p>这两种同样也是等价的。但是在对象的属性命名中如果恰好和预留字碰撞了的话。</p><div class="language-js"><pre><code>obj<span class="token punctuation">.</span>for <span class="token operator">=</span> <span class="token string">&#39;Simon&#39;</span><span class="token punctuation">;</span> <span class="token comment">// Syntax error, because &#39;for&#39; is a reserved word</span>\nobj<span class="token punctuation">[</span><span class="token string">&#39;for&#39;</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;Simon&#39;</span><span class="token punctuation">;</span> <span class="token comment">// works fine</span>\n</code></pre></div><h2 id="arrays"><a class="header-anchor" href="#arrays" aria-hidden="true">#</a> Arrays</h2><p>数组在JavaScript中也算的上市一种特殊的对象了。</p><p>一般会使用<code>[]</code>来读取数组，同样还有一个方便的属性<code>length</code>。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;dog&#39;</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;hen&#39;</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre></div><p>快速创建数组的另一种方式</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hen&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 3</span>\n</code></pre></div><p><code>array.length</code>计算的是数组的总长度。</p><div class="language-js"><pre><code><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hen&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\na<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;fox&#39;</span><span class="token punctuation">;</span>\na<span class="token punctuation">.</span>length<span class="token punctuation">;</span> <span class="token comment">// 101</span>\n</code></pre></div><p>如果你指向一个不存在的数组下标，你会得到<code>undefined</code>的返回值</p><p>一般使用数组和循环</p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with a[i]</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>ES2015引入更简洁的</p><p><code>for..of</code></p><div class="language-js"><pre><code><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> currentValue <span class="token keyword">of</span> a<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with currentValue</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p>同样可以使用重复的<code>for...in</code></p><p>循环，这个不根据数组的元素来执行循环，依靠的是数组的下标，此外，如果增加个新属性对于<code>Array.prototype</code>，它也有可能新加个循环在这之上。所以一般不推荐使用<code>for..in</code></p><p>另一种方式进行迭代，在ES5中是<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noopener noreferrer">forEach()</a></p><div class="language-js"><pre><code><span class="token punctuation">[</span><span class="token string">&#39;dog&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;cat&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;hen&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">currentValue<span class="token punctuation">,</span> index<span class="token punctuation">,</span> array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// Do something with currentValue or array[index]</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>关于数组的方法，想要在其中添加一个元素</p><div class="language-js"><pre><code>a<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><table><thead><tr><th>Method name</th><th>Description</th></tr></thead><tbody><tr><td><code>a.toString()</code></td><td>Returns a string with the <code>toString()</code> of each element separated by commas.</td></tr><tr><td><code>a.toLocaleString()</code></td><td>Returns a string with the <code>toLocaleString()</code>of each element separated by commas.</td></tr><tr><td><code>a.concat(item1[, item2[, ...[, itemN]]])</code></td><td>Returns a new array with the items added on to it.</td></tr><tr><td><code>a.join(sep)</code></td><td>Converts the array to a string — with values delimited by the <code>sep</code> param</td></tr><tr><td><code>a.pop()</code></td><td>Removes and returns the last item.</td></tr><tr><td><code>a.push(item1, ..., itemN)</code></td><td>Appends items to the end of the array.</td></tr><tr><td><code>a.reverse()</code></td><td>Reverses the array.</td></tr><tr><td><code>a.shift()</code></td><td>Removes and returns the first item.</td></tr><tr><td><code>a.slice(start[, end])</code></td><td>Returns a sub-array.</td></tr><tr><td><code>a.sort([cmpfn])</code></td><td>Takes an optional comparison function.</td></tr><tr><td><code>a.splice(start, delcount[, item1[, ...[, itemN]]])</code></td><td>Lets you modify an array by deleting a section and replacing it with more items.</td></tr><tr><td><code>a.unshift(item1[, item2[, ...[, itemN]]])</code></td><td>Prepends items to the start of the array.</td></tr></tbody></table>',82);o.render=function(p,t,e,o,r,u){return n(),s("div",null,[c,a(" more "),l])};export default o;export{e as __pageData};
